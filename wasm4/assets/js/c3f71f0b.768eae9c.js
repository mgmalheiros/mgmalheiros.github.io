(self.webpackChunksite=self.webpackChunksite||[]).push([[7109],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return k}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),k=i,m=p["".concat(s,".").concat(k)]||p[k]||d[k]||r;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6742:function(e,n,t){"use strict";t.d(n,{Z:function(){return k}});var a=t(9756),i=t(7294),r=t(3727),o=t(2263),l=t(3919),s=t(412),c=(0,i.createContext)({collectLink:function(){}}),u=t(4996),d=t(8780),p=["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck","autoAddBaseUrl"];var k=function(e){var n,t,k=e.isNavLink,m=e.to,h=e.href,f=e.activeClassName,y=e.isActive,g=e["data-noBrokenLinkCheck"],v=e.autoAddBaseUrl,b=void 0===v||v,N=(0,a.Z)(e,p),w=(0,o.Z)().siteConfig,C=w.trailingSlash,P=w.baseUrl,T=(0,u.C)().withBaseUrl,x=(0,i.useContext)(c),O=m||h,S=(0,l.Z)(O),E=null==O?void 0:O.replace("pathname://",""),_=void 0!==E?(t=E,b&&function(e){return e.startsWith("/")}(t)?T(t):t):void 0;_&&S&&(_=(0,d.applyTrailingSlash)(_,{trailingSlash:C,baseUrl:P}));var L,j=(0,i.useRef)(!1),q=k?r.OL:r.rU,U=s.Z.canUseIntersectionObserver;(0,i.useEffect)((function(){return!U&&S&&null!=_&&window.docusaurus.prefetch(_),function(){U&&L&&L.disconnect()}}),[_,U,S]);var B=null!==(n=null==_?void 0:_.startsWith("#"))&&void 0!==n&&n,M=!_||!S||B;return _&&S&&!B&&!g&&x.collectLink(_),M?i.createElement("a",Object.assign({href:_},O&&!S&&{target:"_blank",rel:"noopener noreferrer"},N)):i.createElement(q,Object.assign({},N,{onMouseEnter:function(){j.current||null==_||(window.docusaurus.preload(_),j.current=!0)},innerRef:function(e){var n,t;U&&e&&S&&(n=e,t=function(){null!=_&&window.docusaurus.prefetch(_)},(L=new window.IntersectionObserver((function(e){e.forEach((function(e){n===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(L.unobserve(n),L.disconnect(),t())}))}))).observe(n))},to:_||""},k&&{isActive:y,activeClassName:f}))}},3919:function(e,n,t){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!a(e)}t.d(n,{b:function(){return a},Z:function(){return i}})},4996:function(e,n,t){"use strict";t.d(n,{C:function(){return r},Z:function(){return o}});var a=t(2263),i=t(3919);function r(){var e=(0,a.Z)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,t=void 0===n?"/":n,r=e.url;return{withBaseUrl:function(e,n){return function(e,n,t,a){var r=void 0===a?{}:a,o=r.forcePrependBaseUrl,l=void 0!==o&&o,s=r.absolute,c=void 0!==s&&s;if(!t)return t;if(t.startsWith("#"))return t;if((0,i.b)(t))return t;if(l)return n+t;var u=t.startsWith(n)?t:n+t.replace(/^\//,"");return c?e+u:u}(r,t,e,n)}}}function o(e,n){return void 0===n&&(n={}),(0,r().withBaseUrl)(e,n)}},9443:function(e,n,t){"use strict";var a=(0,t(7294).createContext)(void 0);n.Z=a},8802:function(e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){var t=n.trailingSlash,a=n.baseUrl;if(e.startsWith("#"))return e;if(void 0===t)return e;var i,r=e.split(/[#?]/)[0],o="/"===r||r===a?r:(i=r,t?function(e){return e.endsWith("/")?e:e+"/"}(i):function(e){return e.endsWith("/")?e.slice(0,-1):e}(i));return e.replace(r,o)}},8780:function(e,n,t){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.uniq=n.applyTrailingSlash=void 0;var i=t(8802);Object.defineProperty(n,"applyTrailingSlash",{enumerable:!0,get:function(){return a(i).default}});var r=t(9964);Object.defineProperty(n,"uniq",{enumerable:!0,get:function(){return a(r).default}})},9964:function(e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return Array.from(new Set(e))}},2375:function(e,n,t){"use strict";t.d(n,{T:function(){return p},Z:function(){return k}});var a=t(7294),i=t(6742),r=t(5977),o=t(6010),l=t(9443);var s=function(){var e=(0,a.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},c={assemblyscript:"AssemblyScript",c:"C / C++",c3:"C3",d:"D",go:"Go",grain:"Grain",nelua:"Nelua",nim:"Nim",odin:"Odin",penne:"Penne",porth:"Porth",roland:"Roland",rust:"Rust",wat:"WebAssembly Text",zig:"Zig"};function u(e){return"string"==typeof e&&Object.prototype.hasOwnProperty.call(c,e)}function d(e){return(null!=e?e:"").trim().toLowerCase()}function p(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{hidden:t,className:i},n)}function k(e){var n=a.Children.toArray(e.children),t=n.map((function(e){return e.props.value})),l=function(){var e=s(),n=e.tabGroupChoices,t=e.setTabGroupChoices,i=(0,a.useState)("assemblyscript"),r=i[0],o=i[1],l=function(e){var n=u(e);n?(o(e),t("language",e)):n||console.warn('MultilanguageCode: invalid code-lang received: "'+e+'"')},c=(0,a.useRef)(l);(0,a.useEffect)((function(){c.current=l}));var p="undefined"!=typeof window?window.location.search:"",k=n.language;return(0,a.useLayoutEffect)((function(){var e=d(k);u(e)&&o(e)}),[k]),(0,a.useEffect)((function(){var e=d(new URLSearchParams(p).get("code-lang"));u(e)&&c.current(e)}),[p]),{activeLang:r,updateLang:l}}().activeLang,p=(0,r.k6)(),k=t.includes(l)?l:t.includes("assemblyscript")?"assemblyscript":t[0],m=a.createElement("div",{className:"dropdown dropdown--hoverable dropdown--right"},a.createElement("a",{className:"navbar__link"},c[k]," "),a.createElement("ul",{className:"dropdown__menu text--left"},Object.entries(c).filter((function(e){return t.includes(e[0])})).map((function(e){var n=e[0],t=e[1],r=p.location.pathname+"?code-lang="+n+(p.location.hash||"#no-scroll");return a.createElement("li",{key:n},a.createElement(i.Z,{to:r,replace:!0,className:(0,o.Z)("dropdown__link",n===k&&"dropdown__link--active")},t))}))));return a.createElement("div",null,a.createElement("div",{className:"multilang"},m),a.createElement("div",null,n.map((function(e){return(0,a.cloneElement)(e,{key:e.props.value,hidden:e.props.value!==k})}))))}},5880:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return d},default:function(){return k}});var a=t(2122),i=t(9756),r=(t(7294),t(3905)),o=t(2375),l=["components"],s={},c="Creating the Snake",u={unversionedId:"tutorials/snake/creating-the-snake",id:"tutorials/snake/creating-the-snake",isDocsHomePage:!1,title:"Creating the Snake",description:"Let's take a look at the main component of the game: The snake. There are several ways to implement one.",source:"@site/docs/tutorials/snake/creating-the-snake.md",sourceDirName:"tutorials/snake",slug:"/tutorials/snake/creating-the-snake",permalink:"/docs/tutorials/snake/creating-the-snake",editUrl:"https://github.com/aduros/wasm4/edit/main/site/docs/tutorials/snake/creating-the-snake.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Setting Color Palette",permalink:"/docs/tutorials/snake/setting-color-palette"},next:{title:"Drawing the Snake",permalink:"/docs/tutorials/snake/drawing-the-snake"}},d=[],p={toc:d};function k(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-the-snake"},"Creating the Snake"),(0,r.kt)("p",null,"Let's take a look at the main component of the game: The snake. There are several ways to implement one."),(0,r.kt)(o.Z,{mdxType:"MultiLanguage"},(0,r.kt)(o.T,{value:"assemblyscript",mdxType:"Page"},(0,r.kt)("p",null,"To keep things tidy, I recommend you'd create a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"snake.ts"),". This file contains two classes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Point")," - Holding X and Y coordinates"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Snake")," - The actual snake implementation")),(0,r.kt)("p",null,"The content is rather simple:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export class Point {\n    constructor(\n        public x: i32,\n        public y: i32\n    ) {}\n\n    equals(other: Point): bool {\n        return this.x == other.x && this.y == other.y\n    }\n}\n\nexport class Snake {\n    body: Array<Point> = [\n        new Point(2, 0),\n        new Point(1, 0),\n        new Point(0, 0)\n    ]\n    direction: Point = new Point(1, 0)\n}\n")),(0,r.kt)("p",null,"The snake class contains the body and the current direction of the snake instance.\nBut it lacks any functionality for now.")),(0,r.kt)(o.T,{value:"c",mdxType:"Page"},(0,r.kt)("p",null,"In this section we will define a structure to hold our snake."),(0,r.kt)("p",null,"Create a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"snake.h")," and fill it with the code-snippet below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"#pragma once\n\n#include <stdint.h>\n\nstruct point {\n    int16_t x;\n    int16_t y;\n};\n\nstruct snake {\n    struct point* body;\n    struct point direction;\n    uint16_t length;\n};\n")),(0,r.kt)("p",null,"The snake type contains the body and the current direction of the snake instance. We also need to define a point struct to hold the x and y coordinates of our snake body parts."),(0,r.kt)("p",null,"We need to fill out the implementation of the snake. Function declarations will be added to ",(0,r.kt)("inlineCode",{parentName:"p"},"snake.h")," and the definitions to a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"snake.c"),"."),(0,r.kt)("p",null,"We will work on two functions, one to create the snake, and one to add a body part to the snake."),(0,r.kt)("p",null,"Add the following declarations to the bottom of the ",(0,r.kt)("inlineCode",{parentName:"p"},"snake.h")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void snake_create(struct snake *snake);\nvoid snake_push(struct snake *snake, struct point p);\n")),(0,r.kt)("p",null,"Then in the ",(0,r.kt)("inlineCode",{parentName:"p"},"snake.c")," file, we need to include our header files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include "snake.h"\n#include "wasm4.h"\n#include <stdlib.h>\n')),(0,r.kt)("p",null,"The file ",(0,r.kt)("inlineCode",{parentName:"p"},"stdlib.h")," is required for ",(0,r.kt)("inlineCode",{parentName:"p"},"realloc"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"snake_create")," function ",(0,r.kt)("inlineCode",{parentName:"p"},"free"),"s any previous snake body that may have been allocated and initializes the snake struct body pointer to ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),", and the length to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void snake_create(struct snake *snake)\n{\n    if(snake->body != NULL)\n    {\n            free(snake->body);\n            snake->body = NULL;\n    }\n    snake->length = 0;\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"snake_push")," function will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"realloc")," function to allocate memory for each snake body part and assign the passed point struct value to it. When ",(0,r.kt)("inlineCode",{parentName:"p"},"realloc")," is passed a ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," pointer it behaves the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"malloc")," so we can forego a ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," pointer check and just use ",(0,r.kt)("inlineCode",{parentName:"p"},"realloc"),". The result of ",(0,r.kt)("inlineCode",{parentName:"p"},"realloc")," is stored in a temporary ",(0,r.kt)("inlineCode",{parentName:"p"},"body")," variable, when it succeeds the ",(0,r.kt)("inlineCode",{parentName:"p"},"snake->body")," pointer is updated and the point value set."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void snake_push(struct snake *snake, struct point p)\n{\n    struct point* body = realloc(snake->body, sizeof(struct point) * (snake->length+1));\n    if(body)\n    {\n        snake->body = body;\n        snake->body[snake->length++] = p;\n    }\n}\n"))),(0,r.kt)(o.T,{value:"d",mdxType:"Page"},(0,r.kt)("p",null,"// TODO")),(0,r.kt)(o.T,{value:"go",mdxType:"Page"},(0,r.kt)("p",null,"If you've used Go in the past, this next section won't be too surprising for you. You'll create a new type for the snake with the required properties."),(0,r.kt)("p",null,"For this, create a new file an call it ",(0,r.kt)("inlineCode",{parentName:"p"},"snake.go"),". Then fill it with the code-snippet below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"package main\n\ntype Point struct {\n    X int\n    Y int\n}\n\ntype Snake struct {\n    Body      []Point\n    Direction Point\n}\n")),(0,r.kt)("p",null,"The snake type contains the body and the current direction of the snake instance.\nBut it lacks any functionality for now."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"BuiltIn Type")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Go offers a buildIn type for points. It's in ",(0,r.kt)("inlineCode",{parentName:"p"},"image"),".\nCreating our own type reduces the size of the cart.")))),(0,r.kt)(o.T,{value:"nelua",mdxType:"Page"},(0,r.kt)("p",null,"To keep things tidy, I recommend you'd create a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"snake.nelua"),". This file contains two records:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Point")," - Holding X and Y coordinates"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Snake")," - The actual snake implementation")),(0,r.kt)("p",null,"The content is rather simple:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'require "wasm4"\nlocal sequence = require "sequence"\n\nlocal snake = @record{}\n\nlocal snake.Point = @record{\n  x: int32,\n  y: int32,\n}\n\nlocal Point = snake.Point\n\nlocal snake.Snake = @record{\n  body: sequence(Point),\n  direction: Point,\n}\n\nlocal Snake = snake.Snake\n\nfunction Snake.init(): Snake\n  return Snake{\n    body = {\n      { x = 2, y = 0 },\n      { x = 1, y = 0 },\n      { x = 0, y = 0 },\n    },\n    direction = { x = 1, y = 0 },\n  }\nend\n\nreturn snake\n')),(0,r.kt)("p",null,"The snake record contains the body and the current direction of the snake instance.\nBut it lacks any functionality for now.")),(0,r.kt)(o.T,{value:"nim",mdxType:"Page"},(0,r.kt)("p",null,"// TODO")),(0,r.kt)(o.T,{value:"odin",mdxType:"Page"},(0,r.kt)("p",null,"// TODO")),(0,r.kt)(o.T,{value:"porth",mdxType:"Page"},(0,r.kt)("p",null,"// TODO")),(0,r.kt)(o.T,{value:"rust",mdxType:"Page"},(0,r.kt)("p",null,"To keep things tidy, I recommend to create a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"snake.rs"),".\nThis file contains two structs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Point")," - Holds ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"y")," coordinates."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Snake")," - The actual snake implementation.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Snake")," has an ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/reference/items/associated-items.html#associated-functions-and-methods"},"associated function")," ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," that returns a brand new snake."),(0,r.kt)("p",null,"We have also defined few derivable traits to ",(0,r.kt)("inlineCode",{parentName:"p"},"Point"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PartialEq")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Eq")," add the ",(0,r.kt)("inlineCode",{parentName:"li"},"==")," operator to perform an equality checks between ",(0,r.kt)("inlineCode",{parentName:"li"},"Point")," instances."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Clone")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Copy")," simplify use of ",(0,r.kt)("inlineCode",{parentName:"li"},"Point")," instance.")),(0,r.kt)("p",null,"You can learn more about these traits in the ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/stable/book/"},"rust-book"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/book/appendix-03-derivable-traits.html?highlight=partialEq#partialeq-and-eq-for-equality-comparisons"},"PartialEq, Eq")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/book/appendix-03-derivable-traits.html?highlight=partialEq#clone-and-copy-for-duplicating-values"},"Clone, Copy")," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Clone, Copy, PartialEq, Eq)]\npub struct Point {\n    pub x: i32,\n    pub y: i32,\n}\n\npub struct Snake {\n    pub body: Vec<Point>,\n    pub direction: Point,\n}\n\nimpl Snake {\n    pub fn new() -> Self {\n        Self {\n            body: vec![\n                Point { x: 2, y: 0 },\n                Point { x: 1, y: 0 },\n                Point { x: 0, y: 0 },\n            ],\n            direction: Point { x: 1, y: 0 },\n        }\n    }\n}\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Don't forget to declare this module in ",(0,r.kt)("inlineCode",{parentName:"p"},"lib.rs"),"."),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"mod snake;\n"))))),(0,r.kt)(o.T,{value:"wat",mdxType:"Page"},(0,r.kt)("p",null,"Unfortunately, the WebAssembly text format has no way to create classes or structs. The only way to lay out the stack structure is by manually allocating memory for the snake structure."),(0,r.kt)("p",null,"We'll pretend as though we have the following types. Note that they are not valid WebAssembly text definitions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasm"},"(;\n  = 8 bytes\n  typedef struct {\n    i32 x;\n    i32 y;\n  } Point;\n\n  = 3200 bytes\n  typedef Point Body[400];\n\n  = 3212 bytes\n  typedef {\n    Point direction;\n    i32 body_length;\n    Body body;\n  } Snake;\n;)\n")),(0,r.kt)("p",null,"We'll place these values in linear memory starting at 0x19a0, which is the start of the region mapped for use by the game:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasm"},";; snake.direction   = 0x19a0\n;; snake.body_length = 0x19a8\n;; snake.body        = 0x19ac\n")),(0,r.kt)("p",null,"Let's start the snake with 3 points: ",(0,r.kt)("inlineCode",{parentName:"p"},"(2, 0), (1, 0), (0, 0)"),". The snake's initial direction will be moving left, ",(0,r.kt)("inlineCode",{parentName:"p"},"(1, 0)"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasm"},'(data (i32.const 0x19a0)\n  "\\01\\00\\00\\00" "\\00\\00\\00\\00" ;; direction (1, 0)\n  "\\03\\00\\00\\00"                ;; body_length 3\n  "\\02\\00\\00\\00" "\\00\\00\\00\\00" ;; body[0] = (2, 0)\n  "\\01\\00\\00\\00" "\\00\\00\\00\\00" ;; body[1] = (1, 0)\n  "\\00\\00\\00\\00" "\\00\\00\\00\\00" ;; body[2] = (0, 0)\n)\n'))),(0,r.kt)(o.T,{value:"zig",mdxType:"Page"},(0,r.kt)("p",null,"To keep things tidy, I recommend you'd create a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"snake.zig"),". This file contains two structs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Point")," - Holding X and Y coordinates"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Snake")," - The actual snake implementation")),(0,r.kt)("p",null,"The content is rather simple:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-zig"},'const std = @import("std");\n\npub const Point = struct {\n    x: i32,\n    y: i32,\n\n    pub fn init(x: i32, y: i32) Point {\n        return .{\n            .x = x,\n            .y = y,\n        };\n    }\n\n    pub fn equals(this: Point, other: Point) bool {\n        return this.x == other.x and this.y == other.y;\n    }\n};\n\npub const Snake = struct {\n    body: std.BoundedArray(Point, 400),\n    direction: Point,\n\n    pub fn init() Snake {\n        return .{\n            .body = std.BoundedArray(Point, 400).fromSlice(&.{\n                Point.init(2, 0),\n                Point.init(1, 0),\n                Point.init(0, 0),\n            }) catch @panic("couldn\'t init snake body"),\n            .direction = Point.init(1, 0),\n        };\n    }\n};\n')),(0,r.kt)("p",null,"The snake class contains the body and the current direction of the snake instance.\nBut it lacks any functionality for now."))))}k.isMDXComponent=!0},6010:function(e,n,t){"use strict";function a(e){var n,t,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(i&&(i+=" "),i+=t);else for(n in e)e[n]&&(i&&(i+=" "),i+=n);return i}function i(){for(var e,n,t=0,i="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(i&&(i+=" "),i+=n);return i}t.d(n,{Z:function(){return i}})}}]);