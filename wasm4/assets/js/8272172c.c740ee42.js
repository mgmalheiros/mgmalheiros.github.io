(self.webpackChunksite=self.webpackChunksite||[]).push([[6301],{3905:function(n,e,t){"use strict";t.d(e,{Zo:function(){return u},kt:function(){return d}});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function x(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?x(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):x(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},x=Object.keys(n);for(a=0;a<x.length;a++)t=x[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var x=Object.getOwnPropertySymbols(n);for(a=0;a<x.length;a++)t=x[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var l=a.createContext({}),i=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},u=function(n){var e=i(n.components);return a.createElement(l.Provider,{value:e},n.children)},s={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,x=n.originalType,l=n.parentName,u=c(n,["components","mdxType","originalType","parentName"]),p=i(t),d=r,m=p["".concat(l,".").concat(d)]||p[d]||s[d]||x;return t?a.createElement(m,o(o({ref:e},u),{},{components:t})):a.createElement(m,o({ref:e},u))}));function d(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var x=t.length,o=new Array(x);o[0]=p;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=n,c.mdxType="string"==typeof n?n:r,o[1]=c;for(var i=2;i<x;i++)o[i]=t[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6742:function(n,e,t){"use strict";t.d(e,{Z:function(){return d}});var a=t(9756),r=t(7294),x=t(3727),o=t(2263),c=t(3919),l=t(412),i=(0,r.createContext)({collectLink:function(){}}),u=t(4996),s=t(8780),p=["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck","autoAddBaseUrl"];var d=function(n){var e,t,d=n.isNavLink,m=n.to,g=n.href,f=n.activeClassName,h=n.isActive,k=n["data-noBrokenLinkCheck"],w=n.autoAddBaseUrl,N=void 0===w||w,v=(0,a.Z)(n,p),y=(0,o.Z)().siteConfig,b=y.trailingSlash,C=y.baseUrl,O=(0,u.C)().withBaseUrl,_=(0,r.useContext)(i),H=m||g,T=(0,c.Z)(H),P=null==H?void 0:H.replace("pathname://",""),R=void 0!==P?(t=P,N&&function(n){return n.startsWith("/")}(t)?O(t):t):void 0;R&&T&&(R=(0,s.applyTrailingSlash)(R,{trailingSlash:b,baseUrl:C}));var A,S=(0,r.useRef)(!1),W=d?x.OL:x.rU,j=l.Z.canUseIntersectionObserver;(0,r.useEffect)((function(){return!j&&T&&null!=R&&window.docusaurus.prefetch(R),function(){j&&A&&A.disconnect()}}),[R,j,T]);var D=null!==(e=null==R?void 0:R.startsWith("#"))&&void 0!==e&&e,E=!R||!T||D;return R&&T&&!D&&!k&&_.collectLink(R),E?r.createElement("a",Object.assign({href:R},H&&!T&&{target:"_blank",rel:"noopener noreferrer"},v)):r.createElement(W,Object.assign({},v,{onMouseEnter:function(){S.current||null==R||(window.docusaurus.preload(R),S.current=!0)},innerRef:function(n){var e,t;j&&n&&T&&(e=n,t=function(){null!=R&&window.docusaurus.prefetch(R)},(A=new window.IntersectionObserver((function(n){n.forEach((function(n){e===n.target&&(n.isIntersecting||n.intersectionRatio>0)&&(A.unobserve(e),A.disconnect(),t())}))}))).observe(e))},to:R||""},d&&{isActive:h,activeClassName:f}))}},3919:function(n,e,t){"use strict";function a(n){return!0===/^(\w*:|\/\/)/.test(n)}function r(n){return void 0!==n&&!a(n)}t.d(e,{b:function(){return a},Z:function(){return r}})},4996:function(n,e,t){"use strict";t.d(e,{C:function(){return x},Z:function(){return o}});var a=t(2263),r=t(3919);function x(){var n=(0,a.Z)().siteConfig,e=(n=void 0===n?{}:n).baseUrl,t=void 0===e?"/":e,x=n.url;return{withBaseUrl:function(n,e){return function(n,e,t,a){var x=void 0===a?{}:a,o=x.forcePrependBaseUrl,c=void 0!==o&&o,l=x.absolute,i=void 0!==l&&l;if(!t)return t;if(t.startsWith("#"))return t;if((0,r.b)(t))return t;if(c)return e+t;var u=t.startsWith(e)?t:e+t.replace(/^\//,"");return i?n+u:u}(x,t,n,e)}}}function o(n,e){return void 0===e&&(e={}),(0,x().withBaseUrl)(n,e)}},9443:function(n,e,t){"use strict";var a=(0,t(7294).createContext)(void 0);e.Z=a},8802:function(n,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n,e){var t=e.trailingSlash,a=e.baseUrl;if(n.startsWith("#"))return n;if(void 0===t)return n;var r,x=n.split(/[#?]/)[0],o="/"===x||x===a?x:(r=x,t?function(n){return n.endsWith("/")?n:n+"/"}(r):function(n){return n.endsWith("/")?n.slice(0,-1):n}(r));return n.replace(x,o)}},8780:function(n,e,t){"use strict";var a=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0}),e.uniq=e.applyTrailingSlash=void 0;var r=t(8802);Object.defineProperty(e,"applyTrailingSlash",{enumerable:!0,get:function(){return a(r).default}});var x=t(9964);Object.defineProperty(e,"uniq",{enumerable:!0,get:function(){return a(x).default}})},9964:function(n,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n){return Array.from(new Set(n))}},2375:function(n,e,t){"use strict";t.d(e,{T:function(){return p},Z:function(){return d}});var a=t(7294),r=t(6742),x=t(5977),o=t(6010),c=t(9443);var l=function(){var n=(0,a.useContext)(c.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},i={assemblyscript:"AssemblyScript",c:"C / C++",c3:"C3",d:"D",go:"Go",grain:"Grain",nelua:"Nelua",nim:"Nim",odin:"Odin",penne:"Penne",porth:"Porth",roland:"Roland",rust:"Rust",wat:"WebAssembly Text",zig:"Zig"};function u(n){return"string"==typeof n&&Object.prototype.hasOwnProperty.call(i,n)}function s(n){return(null!=n?n:"").trim().toLowerCase()}function p(n){var e=n.children,t=n.hidden,r=n.className;return a.createElement("div",{hidden:t,className:r},e)}function d(n){var e=a.Children.toArray(n.children),t=e.map((function(n){return n.props.value})),c=function(){var n=l(),e=n.tabGroupChoices,t=n.setTabGroupChoices,r=(0,a.useState)("assemblyscript"),x=r[0],o=r[1],c=function(n){var e=u(n);e?(o(n),t("language",n)):e||console.warn('MultilanguageCode: invalid code-lang received: "'+n+'"')},i=(0,a.useRef)(c);(0,a.useEffect)((function(){i.current=c}));var p="undefined"!=typeof window?window.location.search:"",d=e.language;return(0,a.useLayoutEffect)((function(){var n=s(d);u(n)&&o(n)}),[d]),(0,a.useEffect)((function(){var n=s(new URLSearchParams(p).get("code-lang"));u(n)&&i.current(n)}),[p]),{activeLang:x,updateLang:c}}().activeLang,p=(0,x.k6)(),d=t.includes(c)?c:t.includes("assemblyscript")?"assemblyscript":t[0],m=a.createElement("div",{className:"dropdown dropdown--hoverable dropdown--right"},a.createElement("a",{className:"navbar__link"},i[d]," "),a.createElement("ul",{className:"dropdown__menu text--left"},Object.entries(i).filter((function(n){return t.includes(n[0])})).map((function(n){var e=n[0],t=n[1],x=p.location.pathname+"?code-lang="+e+(p.location.hash||"#no-scroll");return a.createElement("li",{key:e},a.createElement(r.Z,{to:x,replace:!0,className:(0,o.Z)("dropdown__link",e===d&&"dropdown__link--active")},t))}))));return a.createElement("div",null,a.createElement("div",{className:"multilang"},m),a.createElement("div",null,e.map((function(n){return(0,a.cloneElement)(n,{key:n.props.value,hidden:n.props.value!==d})}))))}},364:function(n,e,t){"use strict";t.d(e,{Z:function(){return o}});var a=t(7294),r=t(2375),x={"language-typescript":"assemblyscript","language-javascript":"assemblyscript","language-c":"c","language-c3":"c3","language-cpp":"c","language-d":"d","language-grain":"grain","language-lua":"nelua","language-nelua":"nelua","language-nim":"nim","language-roland":"roland","language-rust":"rust","language-go":"go","language-odin":"odin","language-penne":"penne","language-porth":"porth","language-wasm":"wat","language-zig":"zig"};function o(n){var e=a.Children.toArray(n.children).map((function(n,e){return a.createElement(r.T,{key:e,value:x[n.props.children.props.className]},n)}));return a.createElement(r.Z,null,e)}},921:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var a=t(2122),r=t(9756),x=(t(7294),t(3905)),o=t(364),c=["components"],l={},i="Drawing Text",u={unversionedId:"guides/text",id:"guides/text",isDocsHomePage:!1,title:"Drawing Text",description:"To draw some text at position (10, 10):",source:"@site/docs/guides/text.md",sourceDirName:"guides",slug:"/guides/text",permalink:"/docs/guides/text",editUrl:"https://github.com/aduros/wasm4/edit/main/site/docs/guides/text.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Drawing Sprites",permalink:"/docs/guides/sprites"},next:{title:"Playing Audio",permalink:"/docs/guides/audio"}},s=[{value:"Special Characters",id:"special-characters",children:[]},{value:"Custom Fonts",id:"custom-fonts",children:[]}],p={toc:s};function d(n){var e=n.components,t=(0,r.Z)(n,c);return(0,x.kt)("wrapper",(0,a.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,x.kt)("h1",{id:"drawing-text"},"Drawing Text"),(0,x.kt)("p",null,"To draw some text at position (10, 10):"),(0,x.kt)(o.Z,{mdxType:"MultiLanguageCode"},(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-typescript"},'w4.text("Hello world!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-c"},'text("Hello world!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-c3"},'w4::text("Hello world!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-d"},'w4.text("Hello world!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-go"},'w4.Text("Hello world!", 10, 10)\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-lua"},'text("Hello world!", 10, 10)\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-nim"},'text("Hello world!", 10, 10)\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-odin"},'w4.text("Hello world!", 10, 10)\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-penne"},'text("Hello world!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-porth"},'import proc text int int ptr in end\n\n10 10 "Hello World!"c text\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-roland"},'text("Hello world!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-rust"},'text("Hello world!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-wasm"},'(import "env" "text" (func $text (param i32 i32 i32)))\n\n;; Put the string at address 0x2000 in memory.\n(data (i32.const 0x2000) "Hello world!\\00")\n\n(call $text (i32.const 0x2000) (i32.const 10) (i32.const 10))\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-zig"},'w4.text("Hello world!", 10, 10);\n'))),(0,x.kt)("p",null,(0,x.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 1 is used as the text color, ",(0,x.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 2 is used as the background color."),(0,x.kt)("h2",{id:"special-characters"},"Special Characters"),(0,x.kt)("p",null,"The WASM-4 font contains 224 characters total."),(0,x.kt)("img",{src:"/img/charset.png",width:"256",height:"224",className:"pixelated"}),(0,x.kt)("p",null,"Aside from text and symbols, many slots are empty. This is because in ASCII, the text format used for the ",(0,x.kt)("inlineCode",{parentName:"p"},"text()")," function, doesn't have any character indexed to it. Moreover, some of them ",(0,x.kt)("em",{parentName:"p"},"are")," mapped, but as control characters."),(0,x.kt)("p",null,"The ",(0,x.kt)("inlineCode",{parentName:"p"},"\\n"),", for example, is technically a character, but it's mapped to mark a line break."),(0,x.kt)("p",null,"If we look closely at the font, we'll find four arrows and two buttons, highlighted by a circle.\nIt's possible to print one of these characters by escaping it's charcode."),(0,x.kt)("table",null,(0,x.kt)("thead",{parentName:"table"},(0,x.kt)("tr",{parentName:"thead"},(0,x.kt)("th",{parentName:"tr",align:null},"Key"),(0,x.kt)("th",{parentName:"tr",align:null},"Escape Character"))),(0,x.kt)("tbody",{parentName:"table"},(0,x.kt)("tr",{parentName:"tbody"},(0,x.kt)("td",{parentName:"tr",align:null},"X button"),(0,x.kt)("td",{parentName:"tr",align:null},(0,x.kt)("inlineCode",{parentName:"td"},"\\x80"))),(0,x.kt)("tr",{parentName:"tbody"},(0,x.kt)("td",{parentName:"tr",align:null},"Z button"),(0,x.kt)("td",{parentName:"tr",align:null},(0,x.kt)("inlineCode",{parentName:"td"},"\\x81"))),(0,x.kt)("tr",{parentName:"tbody"},(0,x.kt)("td",{parentName:"tr",align:null},"Left arrow"),(0,x.kt)("td",{parentName:"tr",align:null},(0,x.kt)("inlineCode",{parentName:"td"},"\\x84"))),(0,x.kt)("tr",{parentName:"tbody"},(0,x.kt)("td",{parentName:"tr",align:null},"Right arrow"),(0,x.kt)("td",{parentName:"tr",align:null},(0,x.kt)("inlineCode",{parentName:"td"},"\\x85"))),(0,x.kt)("tr",{parentName:"tbody"},(0,x.kt)("td",{parentName:"tr",align:null},"Up arrow"),(0,x.kt)("td",{parentName:"tr",align:null},(0,x.kt)("inlineCode",{parentName:"td"},"\\x86"))),(0,x.kt)("tr",{parentName:"tbody"},(0,x.kt)("td",{parentName:"tr",align:null},"Down arrow"),(0,x.kt)("td",{parentName:"tr",align:null},(0,x.kt)("inlineCode",{parentName:"td"},"\\x87"))))),(0,x.kt)("p",null,"We could use those as instructions for our games!"),(0,x.kt)(o.Z,{mdxType:"MultiLanguageCode"},(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-typescript"},'// Press UP to jump!\nw4.text("Press \\x86 to jump!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-c"},'// Press UP to jump!\ntext("Press \\x86 to jump!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-c3"},'// Press UP to jump!\nw4::text("Press \\x86 to jump!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-d"},'// Press UP to jump!\nw4.text("Press \\x86 to jump!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-go"},'// Press UP to jump!\nw4.Text("Press \\x86 to jump!", 10, 10)\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-lua"},'-- Press UP to jump!\ntext("Press \\x86 to jump!", 10, 10)\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-nim"},'# Press UP to jump!\ntext("Press \\x86 to jump!", 10, 10)\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-odin"},'// Press UP to jump!\nw4.text("Press \\x86 to jump!", 10, 10)\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-penne"},'text("Press \\x86 to jump!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-porth"},'import proc text int int ptr in end\n\n// Press UP to jump!\n10 10 "Press \\x86 to jump!"c text\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-roland"},'// Press UP to jump!\ntext("Press \\x86 to jump!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-rust"},'// Press UP to jump!\ntext(b"Press \\x86 to jump!", 10, 10);\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-wasm"},'(import "env" "text" (func $text (param i32 i32 i32)))\n\n;; Press UP to jump!\n(data (i32.const 0x2000) "Press \\86 to jump!\\00")\n\n(call $text (i32.const 0x2000) (i32.const 10) (i32.const 10))\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-zig"},'// Press UP to jump!\nw4.text("Press \\x86 to jump!", 10, 10);\n'))),(0,x.kt)("h2",{id:"custom-fonts"},"Custom Fonts"),(0,x.kt)("p",null,"Since WASM-4 doesn't have a custom font, we have to figure a way to implement our own. One way to approach this is treating a font like a tilemap, except we're indexing characters instead of numbers!"),(0,x.kt)("p",null,"The example below will print a text using the ",(0,x.kt)("a",{parentName:"p",href:"https://opengameart.org/content/bitscript-a-low-res-handwriting-font"},"BitScript sprite font"),":"),(0,x.kt)(o.Z,{mdxType:"MultiLanguageCode"},(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-typescript"},'import * as w4 from "./wasm4";\n\nconst fontWidth = 208;\nconst fontFlags = w4.BLIT_1BPP;\nconst charWidth = 8;\nconst charHeight = 8;\nconst charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\nconst font = memory.data<u8>([\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x08, 0x1c, 0x1c, 0x3c, 0x18, 0x3e,\n  0x1c, 0x26, 0x10, 0x2c, 0x12, 0x08, 0x24, 0x26,\n  0x1c, 0x3c, 0x1c, 0x78, 0x1c, 0x3c, 0x62, 0x42,\n  0x82, 0xc4, 0x42, 0x66, 0x08, 0x32, 0x22, 0x52,\n  0x24, 0x51, 0x22, 0x25, 0x28, 0x14, 0x14, 0x08,\n  0x24, 0x26, 0x22, 0x52, 0x22, 0xa4, 0x22, 0x52,\n  0x22, 0xa5, 0x44, 0x2a, 0x24, 0x1c, 0x14, 0x52,\n  0x20, 0x12, 0x20, 0x10, 0x20, 0x26, 0x28, 0x04,\n  0x14, 0x08, 0x2c, 0x24, 0x22, 0x52, 0x22, 0xa4,\n  0x20, 0x10, 0x22, 0x24, 0x54, 0x10, 0x24, 0x04,\n  0x14, 0x5c, 0x40, 0x22, 0x38, 0x38, 0x4e, 0x7c,\n  0x28, 0x08, 0x28, 0x10, 0x54, 0x58, 0x42, 0x14,\n  0x44, 0x78, 0x18, 0x10, 0x24, 0x28, 0x54, 0x10,\n  0x14, 0x08, 0x24, 0xa4, 0x40, 0x62, 0x40, 0x20,\n  0x44, 0x48, 0x10, 0x08, 0x34, 0x30, 0x54, 0x48,\n  0x44, 0x20, 0x54, 0x48, 0x04, 0x20, 0x44, 0x28,\n  0x2c, 0x28, 0x08, 0x10, 0x3c, 0xa4, 0x42, 0xa4,\n  0x44, 0xa0, 0x44, 0xc9, 0x10, 0x48, 0x24, 0x52,\n  0x44, 0x4a, 0x44, 0xa0, 0x3a, 0x48, 0x44, 0xa0,\n  0x44, 0x10, 0x28, 0xa8, 0x48, 0x38, 0x42, 0x5b,\n  0x3c, 0x58, 0x38, 0x40, 0x38, 0x46, 0x68, 0x34,\n  0x42, 0x2c, 0x82, 0x84, 0x3a, 0x40, 0x08, 0x86,\n  0x38, 0x40, 0x3a, 0x10, 0x48, 0x46, 0x30, 0x66\n]);\n\nfunction drawSpace(x: i32, y: i32, column: i32, line: i32, colors: u16): void {\n    store<u16>(w4.DRAW_COLORS, w4.DRAW_COLORS & 0x0F);\n    w4.rect(\n        x + (column * charWidth),\n        y + (line * charHeight),\n        charWidth,\n        charHeight\n    );\n    store<u16>(w4.DRAW_COLORS, colors);\n}\n\nfunction write(text: string, x: i32, y: i32, colors: u16): void {\n    // Set draw colors...\n    store<u16>(w4.DRAW_COLORS, colors);\n\n    // Line and column counters.\n    let line  : i32 = 0;\n    let column: i32 = 0;\n\n    // Iterate through each character...\n    for(let i = 0; i < text.length; i += 1) {\n        const char: string = text.charAt(i);\n        const charCode: i32 = char.charCodeAt(0);\n\n        // Break into next line when encounter a "\\n" (newline)...\n        if(charCode === 10) {\n            line  += 1;\n            column = 0;\n            continue;\n        }\n\n        // Character index on charset.\n        let charIndex: i32 = charset.indexOf(char);\n\n        // Skip invalid characters, spaces, etc.\n        if(charIndex < 0 || charIndex >= charset.length) {\n            drawSpace(x, y, column, line, colors);\n            column += 1;\n            continue;\n        }\n\n        // Draw character...\n        w4.blitSub(\n            font,\n            x + (column * charWidth),\n            y + (line * charHeight),\n            charWidth,\n            charHeight,\n            charIndex * charWidth,\n            0,\n            fontWidth,\n            fontFlags\n        );\n\n        // Advance to next column...\n        column += 1;\n    }\n}\n\nexport function update (): void {\n    write("HELLO WORLD WITH\\nOUR CUSTOM FONT", 4, 4, 0x30);\n}\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-penne"},'import "wasm4.pn";\n\nconst FONT_WIDTH: u32 = 208;\nconst CHAR_WIDTH: u32 = 8;\nconst CHAR_HEIGHT: u32 = 8;\nconst CHARSET: [26]u8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\nconst FONT: [208]u8 = [\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x08, 0x1c, 0x1c, 0x3c, 0x18, 0x3e,\n  0x1c, 0x26, 0x10, 0x2c, 0x12, 0x08, 0x24, 0x26,\n  0x1c, 0x3c, 0x1c, 0x78, 0x1c, 0x3c, 0x62, 0x42,\n  0x82, 0xc4, 0x42, 0x66, 0x08, 0x32, 0x22, 0x52,\n  0x24, 0x51, 0x22, 0x25, 0x28, 0x14, 0x14, 0x08,\n  0x24, 0x26, 0x22, 0x52, 0x22, 0xa4, 0x22, 0x52,\n  0x22, 0xa5, 0x44, 0x2a, 0x24, 0x1c, 0x14, 0x52,\n  0x20, 0x12, 0x20, 0x10, 0x20, 0x26, 0x28, 0x04,\n  0x14, 0x08, 0x2c, 0x24, 0x22, 0x52, 0x22, 0xa4,\n  0x20, 0x10, 0x22, 0x24, 0x54, 0x10, 0x24, 0x04,\n  0x14, 0x5c, 0x40, 0x22, 0x38, 0x38, 0x4e, 0x7c,\n  0x28, 0x08, 0x28, 0x10, 0x54, 0x58, 0x42, 0x14,\n  0x44, 0x78, 0x18, 0x10, 0x24, 0x28, 0x54, 0x10,\n  0x14, 0x08, 0x24, 0xa4, 0x40, 0x62, 0x40, 0x20,\n  0x44, 0x48, 0x10, 0x08, 0x34, 0x30, 0x54, 0x48,\n  0x44, 0x20, 0x54, 0x48, 0x04, 0x20, 0x44, 0x28,\n  0x2c, 0x28, 0x08, 0x10, 0x3c, 0xa4, 0x42, 0xa4,\n  0x44, 0xa0, 0x44, 0xc9, 0x10, 0x48, 0x24, 0x52,\n  0x44, 0x4a, 0x44, 0xa0, 0x3a, 0x48, 0x44, 0xa0,\n  0x44, 0x10, 0x28, 0xa8, 0x48, 0x38, 0x42, 0x5b,\n  0x3c, 0x58, 0x38, 0x40, 0x38, 0x46, 0x68, 0x34,\n  0x42, 0x2c, 0x82, 0x84, 0x3a, 0x40, 0x08, 0x86,\n  0x38, 0x40, 0x3a, 0x10, 0x48, 0x46, 0x30, 0x66\n];\n\nfn draw_space(x: i32, y: i32, column: u32, line: u32, colors: u16)\n{\n    DRAW_COLORS = DRAW_COLORS & 0x0F;\n    rect(\n        x + (column * CHAR_WIDTH) as i32,\n        y + (line * CHAR_HEIGHT) as i32,\n        CHAR_WIDTH,\n        CHAR_HEIGHT\n    );\n    DRAW_COLORS = colors;\n}\n\nfn draw_char(char_index: u32, x: i32, y: i32, column: u32, line: u32)\n{\n    blitSub(\n        FONT,\n        x + (column * CHAR_WIDTH) as i32,\n        y + (line * CHAR_HEIGHT) as i32,\n        CHAR_WIDTH,\n        CHAR_HEIGHT,\n        char_index * CHAR_WIDTH,\n        0,\n        FONT_WIDTH,\n        BLIT_1BPP,\n    );\n}\n\nfn write_with_custom_font(text: []u8, x: i32, y: i32, colors: u16)\n{\n    // Set draw colors...\n    DRAW_COLORS = colors;\n\n    // Line and column counters.\n    var line: u32 = 0;\n    var column: u32 = 0;\n\n    // Iterate through each character...\n    var i = 0;\n    {\n        if i == |text|\n            goto end;\n\n        var char_code: u8 = text[i];\n\n        // Break into next line when encounter a "\\n" (newline)...\n        if char_code == 10\n        {\n            line = line + 1;\n            column = 0;\n            goto next;\n        }\n\n        // Character index on charset.\n        var char_index = 0;\n        {\n            if char_index == |CHARSET|\n                goto not_found;\n            if CHARSET[char_index] == char_code\n            {\n                draw_char(char_index as u32, x, y, column, line);\n                goto drawn;\n            }\n            char_index = char_index + 1;\n            loop;\n        }\n\n        not_found:\n        // Skip invalid characters, spaces, etc.\n        draw_space(x, y, column, line, colors);\n\n        drawn:\n        // Advance to next column...\n        column = column + 1;\n\n        next:\n        i = i + 1;\n        loop;\n    }\n    end:\n}\n\npub extern fn update()\n{\n    write_with_custom_font("HELLO WORLD WITH\\nOUR CUSTOM FONT", 4, 4, 0x30);\n}\n')),(0,x.kt)("pre",null,(0,x.kt)("code",{parentName:"pre",className:"language-rust"},'use crate::wasm4::*;\n\nconst FONT_WIDTH: u32 = 208;\nconst FONT_FLAGS: u32 = BLIT_1BPP;\nconst CHAR_WIDTH: u32 = 8;\nconst CHAR_HEIGHT: u32 = 8;\nconst CHARSET: &str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\nconst FONT: &\'static [u8] = &[\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x08, 0x1c, 0x1c, 0x3c, 0x18, 0x3e,\n  0x1c, 0x26, 0x10, 0x2c, 0x12, 0x08, 0x24, 0x26,\n  0x1c, 0x3c, 0x1c, 0x78, 0x1c, 0x3c, 0x62, 0x42,\n  0x82, 0xc4, 0x42, 0x66, 0x08, 0x32, 0x22, 0x52,\n  0x24, 0x51, 0x22, 0x25, 0x28, 0x14, 0x14, 0x08,\n  0x24, 0x26, 0x22, 0x52, 0x22, 0xa4, 0x22, 0x52,\n  0x22, 0xa5, 0x44, 0x2a, 0x24, 0x1c, 0x14, 0x52,\n  0x20, 0x12, 0x20, 0x10, 0x20, 0x26, 0x28, 0x04,\n  0x14, 0x08, 0x2c, 0x24, 0x22, 0x52, 0x22, 0xa4,\n  0x20, 0x10, 0x22, 0x24, 0x54, 0x10, 0x24, 0x04,\n  0x14, 0x5c, 0x40, 0x22, 0x38, 0x38, 0x4e, 0x7c,\n  0x28, 0x08, 0x28, 0x10, 0x54, 0x58, 0x42, 0x14,\n  0x44, 0x78, 0x18, 0x10, 0x24, 0x28, 0x54, 0x10,\n  0x14, 0x08, 0x24, 0xa4, 0x40, 0x62, 0x40, 0x20,\n  0x44, 0x48, 0x10, 0x08, 0x34, 0x30, 0x54, 0x48,\n  0x44, 0x20, 0x54, 0x48, 0x04, 0x20, 0x44, 0x28,\n  0x2c, 0x28, 0x08, 0x10, 0x3c, 0xa4, 0x42, 0xa4,\n  0x44, 0xa0, 0x44, 0xc9, 0x10, 0x48, 0x24, 0x52,\n  0x44, 0x4a, 0x44, 0xa0, 0x3a, 0x48, 0x44, 0xa0,\n  0x44, 0x10, 0x28, 0xa8, 0x48, 0x38, 0x42, 0x5b,\n  0x3c, 0x58, 0x38, 0x40, 0x38, 0x46, 0x68, 0x34,\n  0x42, 0x2c, 0x82, 0x84, 0x3a, 0x40, 0x08, 0x86,\n  0x38, 0x40, 0x3a, 0x10, 0x48, 0x46, 0x30, 0x66\n];\n\nfn draw_space(x: i32, y: i32, column: u32, line: u32, colors: u16) {\n    unsafe { *DRAW_COLORS = *DRAW_COLORS & 0x0F }\n    rect(\n        x + (column * CHAR_WIDTH) as i32,\n        y + (line * CHAR_HEIGHT) as i32,\n        CHAR_WIDTH,\n        CHAR_HEIGHT\n    );\n    unsafe { *DRAW_COLORS = colors }\n}\n\npub fn write(text: &str, x: i32, y: i32, colors: u16) {\n    // Set draw colors...\n    unsafe { *DRAW_COLORS = colors }\n\n    // Line and column counters.\n    let mut line: u32 = 0;\n    let mut column: u32 = 0;\n\n    // Iterate through each character...\n    for c in text.chars() {\n        let char_code = c as u32;\n\n        // Break into next line when encounter a "\\n" (newline)...\n        if char_code == 10 {\n            line += 1;\n            column = 0;\n            continue;\n        }\n\n        // Character index on charset.\n        let char_index: u32;\n\n        match CHARSET.find(c) {\n            Some(x) => char_index = x as u32,\n\n            // Skip invalid characters, spaces, etc.\n            None => {\n                draw_space(x, y, column, line, colors);\n                column += 1;\n                continue;\n            }\n        }\n\n        // Draw character...\n        blit_sub(\n            FONT,\n            x + (column * CHAR_WIDTH) as i32,\n            y + (line * CHAR_HEIGHT) as i32,\n            CHAR_WIDTH,\n            CHAR_HEIGHT,\n            char_index * CHAR_WIDTH,\n            0,\n            FONT_WIDTH,\n            FONT_FLAGS\n        );\n\n        // Advance to next column...\n        column += 1;\n    }\n}\n\n#[no_mangle]\nfn update() {\n    custom::write("HELLO WORLD WITH\\nOUR CUSTOM FONT", 4, 4, 0x30);\n}\n'))))}d.isMDXComponent=!0},6010:function(n,e,t){"use strict";function a(n){var e,t,r="";if("string"==typeof n||"number"==typeof n)r+=n;else if("object"==typeof n)if(Array.isArray(n))for(e=0;e<n.length;e++)n[e]&&(t=a(n[e]))&&(r&&(r+=" "),r+=t);else for(e in n)n[e]&&(r&&(r+=" "),r+=e);return r}function r(){for(var n,e,t=0,r="";t<arguments.length;)(n=arguments[t++])&&(e=a(n))&&(r&&(r+=" "),r+=e);return r}t.d(e,{Z:function(){return r}})}}]);