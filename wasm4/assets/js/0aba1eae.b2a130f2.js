(self.webpackChunksite=self.webpackChunksite||[]).push([[3478],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var i=a.createContext({}),s=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=s(t),m=l,N=d["".concat(i,".").concat(m)]||d[m]||c[m]||r;return t?a.createElement(N,o(o({ref:n},p),{},{components:t})):a.createElement(N,o({ref:n},p))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=d;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u.mdxType="string"==typeof e?e:l,o[1]=u;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2375:function(e,n,t){"use strict";t.d(n,{T:function(){return d},Z:function(){return m}});var a=t(7294),l=t(6742),r=t(5977),o=t(6010),u=t(9443);var i=function(){var e=(0,a.useContext)(u.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s={assemblyscript:"AssemblyScript",c:"C / C++",c3:"C3",d:"D",go:"Go",grain:"Grain",nelua:"Nelua",nim:"Nim",odin:"Odin",penne:"Penne",porth:"Porth",roland:"Roland",rust:"Rust",wat:"WebAssembly Text",zig:"Zig"};function p(e){return"string"==typeof e&&Object.prototype.hasOwnProperty.call(s,e)}function c(e){return(null!=e?e:"").trim().toLowerCase()}function d(e){var n=e.children,t=e.hidden,l=e.className;return a.createElement("div",{hidden:t,className:l},n)}function m(e){var n=a.Children.toArray(e.children),t=n.map((function(e){return e.props.value})),u=function(){var e=i(),n=e.tabGroupChoices,t=e.setTabGroupChoices,l=(0,a.useState)("assemblyscript"),r=l[0],o=l[1],u=function(e){var n=p(e);n?(o(e),t("language",e)):n||console.warn('MultilanguageCode: invalid code-lang received: "'+e+'"')},s=(0,a.useRef)(u);(0,a.useEffect)((function(){s.current=u}));var d="undefined"!=typeof window?window.location.search:"",m=n.language;return(0,a.useLayoutEffect)((function(){var e=c(m);p(e)&&o(e)}),[m]),(0,a.useEffect)((function(){var e=c(new URLSearchParams(d).get("code-lang"));p(e)&&s.current(e)}),[d]),{activeLang:r,updateLang:u}}().activeLang,d=(0,r.k6)(),m=t.includes(u)?u:t.includes("assemblyscript")?"assemblyscript":t[0],N=a.createElement("div",{className:"dropdown dropdown--hoverable dropdown--right"},a.createElement("a",{className:"navbar__link"},s[m]," "),a.createElement("ul",{className:"dropdown__menu text--left"},Object.entries(s).filter((function(e){return t.includes(e[0])})).map((function(e){var n=e[0],t=e[1],r=d.location.pathname+"?code-lang="+n+(d.location.hash||"#no-scroll");return a.createElement("li",{key:n},a.createElement(l.Z,{to:r,replace:!0,className:(0,o.Z)("dropdown__link",n===m&&"dropdown__link--active")},t))}))));return a.createElement("div",null,a.createElement("div",{className:"multilang"},N),a.createElement("div",null,n.map((function(e){return(0,a.cloneElement)(e,{key:e.props.value,hidden:e.props.value!==m})}))))}},364:function(e,n,t){"use strict";t.d(n,{Z:function(){return o}});var a=t(7294),l=t(2375),r={"language-typescript":"assemblyscript","language-javascript":"assemblyscript","language-c":"c","language-c3":"c3","language-cpp":"c","language-d":"d","language-grain":"grain","language-lua":"nelua","language-nelua":"nelua","language-nim":"nim","language-roland":"roland","language-rust":"rust","language-go":"go","language-odin":"odin","language-penne":"penne","language-porth":"porth","language-wasm":"wat","language-zig":"zig"};function o(e){var n=a.Children.toArray(e.children).map((function(e,n){return a.createElement(l.T,{key:n,value:r[e.props.children.props.className]},e)}));return a.createElement(l.Z,null,n)}},7170:function(e,n,t){"use strict";t.d(n,{Z:function(){return r}});var a=t(7294),l=(t(95),t(6742));t(2263);function r(e){var n=e.slug,t=e.title,r=e.author,o=(e.github,e.colWidth);return a.createElement("div",{className:"col col--"+(o||2)+" margin-vert--md col-cart"},a.createElement("div",{className:"cart card"},a.createElement(l.Z,{to:"/play/"+n},a.createElement("div",{className:"card__image"},a.createElement("img",{src:"/wasm4/carts/"+n+".png",alt:t,className:"screenshot"})),a.createElement("div",{className:"card__footer"},a.createElement("div",{className:"avatar__name"},t),a.createElement("small",{className:"avatar__subtitle"},r)))))}},3530:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return d},default:function(){return N}});var a=t(2122),l=t(9756),r=(t(7294),t(3905)),o=t(364),u=t(7170),i=["components"],s={},p="Playing Audio",c={unversionedId:"guides/audio",id:"guides/audio",isDocsHomePage:!1,title:"Playing Audio",description:"WASM-4's sound system has 4 independent channels. Each channel is dedicated to a different type of",source:"@site/docs/guides/audio.md",sourceDirName:"guides",slug:"/guides/audio",permalink:"/wasm4/docs/guides/audio",editUrl:"https://github.com/aduros/wasm4/edit/main/site/docs/guides/audio.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Drawing Text",permalink:"/wasm4/docs/guides/text"},next:{title:"Saving Data",permalink:"/wasm4/docs/guides/saving-data"}},d=[{value:"Playing a Tone",id:"playing-a-tone",children:[]},{value:"Duty Cycle",id:"duty-cycle",children:[]},{value:"Frequency Slide",id:"frequency-slide",children:[]},{value:"Volume",id:"volume",children:[]},{value:"ADSR Envelope",id:"adsr-envelope",children:[]},{value:"Panning",id:"panning",children:[]},{value:"Note Mode",id:"note-mode",children:[]},{value:"Calculating Flags",id:"calculating-flags",children:[]},{value:"Sound Tool",id:"sound-tool",children:[]}],m={toc:d};function N(e){var n=e.components,t=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"playing-audio"},"Playing Audio"),(0,r.kt)("p",null,"WASM-4's sound system has 4 independent channels. Each channel is dedicated to a different type of\naudio waveform."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"2 ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Pulse_wave"},"pulse")," wave (square wave) channels. The classic chiptune sound."),(0,r.kt)("li",{parentName:"ul"},"1 ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Triangle_wave"},"triangle")," wave channel. A softer sound, great for bass."),(0,r.kt)("li",{parentName:"ul"},"1 ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/White_noise"},"noise")," channel. A harsh sound, for percussion and effects.")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"WASM-4's sound system is closely inspired by the architecture of the Nintendo NES and Gameboy."))),(0,r.kt)("h2",{id:"playing-a-tone"},"Playing a Tone"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tone()")," function is used to play a tone with a given frequency on a given channel."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"tone (frequency, duration, volume, flags)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Frequency is the "pitch", measured in hertz.'),(0,r.kt)("li",{parentName:"ul"},"Durations are measured in frames, 1/60ths of a second."),(0,r.kt)("li",{parentName:"ul"},"Volume ranges from 0 (silent) to 100 (full volume)."),(0,r.kt)("li",{parentName:"ul"},"Flags sets the channel (0-3), duty cycle (0-3) and panning (0-2).")),(0,r.kt)("p",null,"For example, to play a one second (60 frames) tone of 262 Hz (",(0,r.kt)("a",{parentName:"p",href:"https://pages.mtu.edu/~suits/notefreqs.html"},"middle C"),") on the first pulse wave channel:"),(0,r.kt)(o.Z,{mdxType:"MultiLanguageCode"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"w4.tone(262, 60, 100, w4.TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"tone(262, 60, 100, TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c3"},"w4::tone(262, 60, 100, w4::TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-d"},"w4.tone(262, 60, 100, w4.tonePulse1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"w4.Tone(262, 60, 100, w4.TONE_PULSE1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"tone(262, 60, 100, TONE_PULSE1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nim"},"tone(262, 60, 100, TONE_PULSE1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-odin"},"w4.tone(262, 60, 100, .Pulse1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-penne"},"tone(262, 60, 100, TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-porth"},"import proc tone int int int int in end\n\n$TONE_PULSE1 60 60 262 tone\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-roland"},"tone(262, 60, 100, TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"tone(262, 60, 100, TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasm"},'(import "env" "tone" (func $tone (param i32 i32 i32 i32)))\n\n(call $tone (i32.const 262) (i32.const 60) (i32.const 100) (global.get $TONE_PULSE1))\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-zig"},"w4.tone(262, 60, 100, w4.TONE_PULSE1);\n"))),(0,r.kt)("h2",{id:"duty-cycle"},"Duty Cycle"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Duty_cycle"},"duty cycle")," of the pulse channels can be controlled\nwith additional flags:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Flag"),(0,r.kt)("th",{parentName:"tr",align:null},"Duty Cycle"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TONE_MODE1")),(0,r.kt)("td",{parentName:"tr",align:null},"12.5% (default)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TONE_MODE2")),(0,r.kt)("td",{parentName:"tr",align:null},"25%")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TONE_MODE3")),(0,r.kt)("td",{parentName:"tr",align:null},"50%")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TONE_MODE4")),(0,r.kt)("td",{parentName:"tr",align:null},"75%")))),(0,r.kt)("p",null,"For example, to play at 50% duty cycle (square wave):"),(0,r.kt)(o.Z,{mdxType:"MultiLanguageCode"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"w4.tone(262, 60, 100, w4.TONE_PULSE1 | w4.TONE_MODE3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"tone(262, 60, 100, TONE_PULSE1 | TONE_MODE3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c3"},"w4::tone(262, 60, 100, w4::TONE_PULSE1 | w4::TONE_MODE3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-d"},"w4.tone(262, 60, 100, w4.tonePulse1 | w4.toneMode3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"w4.Tone(262, 60, 100, w4.TONE_PULSE1 | w4.TONE_MODE3)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"tone(262, 60, 100, TONE_PULSE1 | TONE_MODE3)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nim"},"tone(262, 60, 100, TONE_PULSE1 or TONE_MODE3)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-odin"},"w4.tone(262, 60, 100, .Pulse1, .Half)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-penne"},"tone(262, 60, 100, TONE_PULSE1 | TONE_MODE3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-porth"},"$TONE_PULSE1 $TONE_MODE3 or 100 60 262 tone\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-roland"},"tone(262, 60, 100, TONE_PULSE1 | TONE_MODE3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"tone(262, 60, 100, TONE_PULSE1 | TONE_MODE3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasm"},"(call $tone\n  (i32.const 262)\n  (i32.const 60)\n  (i32.const 100)\n  (i32.or\n    (global.get $TONE_PULSE1)\n    (global.get $TONE_MODE3)))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-zig"},"w4.tone(262, 60, 100, w4.TONE_PULSE1 | w4.TONE_MODE3);\n"))),(0,r.kt)("h2",{id:"frequency-slide"},"Frequency Slide"),(0,r.kt)("p",null,"We can actually pass two different frequencies to ",(0,r.kt)("inlineCode",{parentName:"p"},"tone()"),". The high 16 bits of the ",(0,r.kt)("inlineCode",{parentName:"p"},"frequency"),"\nparameter is used for a second frequency. If non-zero, it specifies the frequency to slide to over\nthe duration of the tone."),(0,r.kt)("p",null,"For example, to slide the tone starting from 262 Hz and up to 523 Hz:"),(0,r.kt)(o.Z,{mdxType:"MultiLanguageCode"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"w4.tone(262 | (523 << 16), 60, 100, w4.TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"tone(262 | (523 << 16), 60, 100, TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c3"},"w4::tone(262 | (523 << 16), 60, 100, w4::TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-d"},"w4.tone(262 | (523 << 16), 60, 100, w4.tonePulse1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"w4.Tone(262 | (523 << 16), 60, 100, w4.TONE_PULSE1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"tone(262 | (523 << 16), 60, 100, TONE_PULSE1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nim"},"tone(262 or (523 shl 16), 60, 100, TONE_PULSE1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-odin"},"w4.tone(262 | (523 << 16), 60, 100, .Pulse1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-penne"},"tone(262 | (523 << 16), 60, 100, TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-porth"},"$TONE_PULSE1 100 60 523 16 shl 262 or tone\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-roland"},"tone(262 | (523 << 16), 60, 100, TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"tone(262 | (523 << 16), 60, 100, TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasm"},"(call $tone\n  (i32.or\n    (i32.const 262)\n    (i32.shl (i32.const 523) (i32.const 16)))\n  (i32.const 60)\n  (i32.const 100)\n  (global.get $TONE_PULSE1))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-zig"},"w4.tone(262 | (523 << 16), 60, 100, w4.TONE_PULSE1);\n"))),(0,r.kt)("h2",{id:"volume"},"Volume"),(0,r.kt)("p",null,"There are two volume levels that can be passed to the tone function:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Volume"),(0,r.kt)("th",{parentName:"tr",align:null},"Shift"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Sustain"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"The main volume used for the ",(0,r.kt)("inlineCode",{parentName:"td"},"sustain")," duration.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Peak"),(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional, the peak volume reached by the ",(0,r.kt)("inlineCode",{parentName:"td"},"attack")," duration.")))),(0,r.kt)("p",null,"If the peak volume is not set (or is set to 0), it defaults to 100."),(0,r.kt)("h2",{id:"adsr-envelope"},"ADSR Envelope"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ADSR_envelope"},"ADSR")," describes how the volume changes over time, and\nhas 4 time components:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Time"),(0,r.kt)("th",{parentName:"tr",align:null},"Shift"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"A"),"ttack"),(0,r.kt)("td",{parentName:"tr",align:null},"24"),(0,r.kt)("td",{parentName:"tr",align:null},"The time it takes to initially ramp up from 0 volume to ",(0,r.kt)("inlineCode",{parentName:"td"},"peak")," volume.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"D"),"ecay"),(0,r.kt)("td",{parentName:"tr",align:null},"16"),(0,r.kt)("td",{parentName:"tr",align:null},"The time taken to ramp down from ",(0,r.kt)("inlineCode",{parentName:"td"},"peak")," volume to the ",(0,r.kt)("inlineCode",{parentName:"td"},"sustain")," volume.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"S"),"ustain"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"The time to hold the tone steady at the ",(0,r.kt)("inlineCode",{parentName:"td"},"sustain")," volume.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"R"),"elease"),(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"The time to ramp back down to 0 volume.")))),(0,r.kt)("p",null,"These times are all measured in frames (1/60th of a second), and can be packed\ninto the ",(0,r.kt)("inlineCode",{parentName:"p"},"duration")," parameter."),(0,r.kt)("p",null,"For example, to play a tone that sustains for one second and releases over half a second (30 frames):"),(0,r.kt)(o.Z,{mdxType:"MultiLanguageCode"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"w4.tone(262, 60 | (30 << 8), 100, w4.TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"tone(262, 60 | (30 << 8), 100, TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c3"},"w4::tone(262, 60 | (30 << 8), 100, w4::TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-d"},"w4.tone(262, 60 | (30 << 8), 100, w4.tonePulse1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"w4.Tone(262, 60 | (30 << 8), 100, w4.TONE_PULSE1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"tone(262, 60 | (30 << 8), 100, TONE_PULSE1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-odin"},"w4.tone(262, 60 | (30 << 8), 100, .Pulse1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-penne"},"tone(262, 60 | (30 << 8), 100, TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-porth"},"$TONE_PULSE1 100 30 8 shl 60 or 262 tone\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-roland"},"tone(262, 60 | (30 << 8), 100, TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"tone(262, 60 | (30 << 8), 100, TONE_PULSE1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasm"},"(call $tone\n  (i32.const 262)\n  (i32.or\n    (i32.const 60)\n    (i32.shl\n      (i32.const 30)\n      (i32.const 8)))\n  (i32.const 100)\n  (global.get $TONE_PULSE1))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-zig"},"w4.tone(262, 60 | (30 << 8), 100, w4.TONE_PULSE1);\n"))),(0,r.kt)("h2",{id:"panning"},"Panning"),(0,r.kt)("p",null,"Tones can be panned either center (default), far left (",(0,r.kt)("inlineCode",{parentName:"p"},"TONE_PAN_LEFT"),"),\nor far right (",(0,r.kt)("inlineCode",{parentName:"p"},"TONE_PAN_RIGHT"),"), similar to on a gameboy."),(0,r.kt)(o.Z,{mdxType:"MultiLanguageCode"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"w4.tone(262, 60, 100, w4.TONE_PULSE1 | w4.TONE_PAN_LEFT);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"tone(262, 60, 100, TONE_PULSE1 | TONE_PAN_LEFT);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c3"},"w4::tone(262, 60, 100, w4::TONE_PULSE1 | w4::TONE_PAN_LEFT);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-d"},"w4.tone(262, 60, 100, w4.tonePulse1 | w4.tonePanLeft);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"w4.Tone(262, 60, 100, w4.TONE_PULSE1 | w4.TONE_PAN_LEFT)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"tone(262, 60, 100, TONE_PULSE1 | TONE_PAN_LEFT)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nim"},"tone(262, 60, 100, TONE_PULSE1 or TONE_PAN_LEFT)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-odin"},"w4.tone(262, 60, 100, .Pulse1, .Half, .Left)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-penne"},"tone(262, 60, 100, TONE_PULSE1 | TONE_PAN_LEFT);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-porth"},"$TONE_PAN_LEFT $TONE_PULSE1 or 100 60 262 tone\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-roland"},"tone(262, 60, 100, TONE_PULSE1 | TONE_PAN_LEFT);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"tone(262, 60, 100, TONE_PULSE1 | TONE_PAN_LEFT);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasm"},"(call $tone\n  (i32.const 262)\n  (i32.const 60)\n  (i32.const 100)\n  (i32.or\n    (global.get $TONE_PULSE1)\n    (global.get $TONE_PAN_LEFT)))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-zig"},"w4.tone(262, 60, 100, w4.TONE_PULSE1 | w4.TONE_PAN_LEFT);\n"))),(0,r.kt)("h2",{id:"note-mode"},"Note Mode"),(0,r.kt)("p",null,"By enabling Note Mode with the ",(0,r.kt)("inlineCode",{parentName:"p"},"TONE_NOTE_MODE")," flag, ",(0,r.kt)("inlineCode",{parentName:"p"},"tone")," will use MIDI note numbers rather than frequencies.\nThis results in more accurate pitches when playing musical notes."),(0,r.kt)("p",null,"You can read more about how this works in the ",(0,r.kt)("a",{parentName:"p",href:"../reference/functions#tone-frequency-duration-volume-flags"},(0,r.kt)("inlineCode",{parentName:"a"},"tone(...)")," documentation"),"."),(0,r.kt)("p",null,"Here's the same example as before, now playing middle-C using the MIDI note number 60:"),(0,r.kt)(o.Z,{mdxType:"MultiLanguageCode"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"w4.tone(60, 60, 100, w4.TONE_PULSE1 | w4.TONE_NOTE_MODE);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"tone(60, 60, 100, TONE_PULSE1 | TONE_NOTE_MODE);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c3"},"w4::tone(60, 60, 100, w4::TONE_PULSE1 | w4::TONE_NOTE_MODE);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-d"},"w4.tone(60, 60, 100, w4.tonePulse1 | w4.toneNoteMode);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"w4.Tone(60, 60, 100, w4.TONE_PULSE1 | w4.TONE_NOTE_MODE)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"tone(60, 60, 100, TONE_PULSE1 | TONE_NOTE_MODE)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nim"},"tone(60, 60, 100, TONE_PULSE1 or TONE_NOTE_MODE)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-odin"},"w4.tone(60, 60, 100, .Pulse1, .Half, .Left, .Note)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-penne"},"tone(60, 60, 100, TONE_PULSE1 | TONE_NOTE_MODE);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-porth"},"$TONE_NOTE_MODE $TONE_PULSE1 or 100 60 60 tone\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-roland"},"tone(60, 60, 100, TONE_PULSE1 | TONE_NOTE_MODE);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"tone(60, 60, 100, TONE_PULSE1 | TONE_NOTE_MODE);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasm"},"(call $tone\n  (i32.const 60)\n  (i32.const 60)\n  (i32.const 100)\n  (i32.or\n    (global.get $TONE_PULSE1)\n    (global.get $TONE_NOTE_MODE)))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-zig"},"w4.tone(60, 60, 100, w4.TONE_PULSE1 | w4.TONE_NOTE_MODE);\n"))),(0,r.kt)("h2",{id:"calculating-flags"},"Calculating Flags"),(0,r.kt)("p",null,"Setting ADSR flags require the use of various bitwise and bitshift operations. This can be a little confusing to understand."),(0,r.kt)("p",null,"These functions can be used to understand how they are calculated:"),(0,r.kt)(o.Z,{mdxType:"MultiLanguageCode"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function toneFrequency(freq1: i32 = 0, freq2: i32 = 0): u32 {\n    return freq1 | (freq2 << 16);\n}\n\nfunction toneDuration(attack: i32 = 0, decay: i32 = 0, sustain: i32 = 0, release: i32 = 0): u32 {\n    return (attack << 24) | (decay << 16) | sustain | (release << 8);\n}\n\nfunction toneVolume(peak: i32 = 0, volume: i32 = 0): u32 {\n    return (peak << 8) | volume;\n}\n\nfunction toneFlags(channel: i32 = 0, mode: i32 = 0, pan: i32 = 0): u32 {\n    return channel | (mode << 2) | (pan << 4);\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c3"},"fn uint tone_frequency(uint freq1, uint freq2)\n{\n    return freq1 | (freq2 << 16)\n}\n\nfn uint tone_duration(uint attack, uint decay, uint sustain, uint release)\n{\n    return (attack << 24) | (decay << 16) | sustain | (release << 8)\n}\n\nfn uint tone_volume(uint peak, uint volume)\n{\n    return: (peak << 8) | volume\n}\n\nfn uint tone_flags(uint channel, uint mode, uint pan)\n{\n    return: channel | (mode << 2) | (pan << 4)\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-penne"},"fn tone_frequency(freq1: u32, freq2: u32) -> u32\n{\n    return: freq1 | (freq2 << 16)\n}\n\nfn tone_duration(attack: u32, decay: u32, sustain: u32, release: u32) -> u32\n{\n    return: (attack << 24) | (decay << 16) | sustain | (release << 8)\n}\n\nfn tone_volume(peak: u32, volume: u32) -> u32\n{\n    return: (peak << 8) | volume\n}\n\nfn tone_flags(channel: u32, mode: u32, pan: u32) -> u32\n{\n    return: channel | (mode << 2) | (pan << 4)\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn tone_frequency(freq1: u32, freq2: u32) -> u32 {\n    freq1 | (freq2 << 16)\n}\n\nfn tone_duration(attack: u32, decay: u32, sustain: u32, release: u32) -> u32 {\n    (attack << 24) | (decay << 16) | sustain | (release << 8)\n}\n\nfn tone_volume(peak: u32, volume: u32) -> u32 {\n    (peak << 8) | volume\n}\n\nfn tone_flags(channel: u32, mode: u32, pan: u32) -> u32 {\n    channel | (mode << 2) | (pan << 4)\n}\n"))),(0,r.kt)("h2",{id:"sound-tool"},"Sound Tool"),(0,r.kt)("p",null,"The sound demo, sound test and IWAS are a great way to quickly experiment with different sounds and\nfind values to plug into your game:"),(0,r.kt)("div",{className:"row margin-bottom--lg"},(0,r.kt)(u.Z,{slug:"sound-demo",title:"Sound Demo",author:"Bruno Garcia",github:"aduros",colWidth:"3",mdxType:"PlayButton"}),(0,r.kt)(u.Z,{slug:"sound-test",title:"Sound Test",author:"Mr.Rafael",github:"MrRafael-dev",colWidth:"3",mdxType:"PlayButton"}),(0,r.kt)(u.Z,{slug:"iwas",title:"IWAS",author:"Mr.Rafael",github:"MrRafael-dev",colWidth:"3",mdxType:"PlayButton"})))}N.isMDXComponent=!0}}]);