(self.webpackChunksite=self.webpackChunksite||[]).push([[8957],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(n),c=r,k=u["".concat(d,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6154:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),l=["components"],o={sidebar_label:"Functions"},d="Functions Reference",s={unversionedId:"reference/functions",id:"reference/functions",isDocsHomePage:!1,title:"Functions Reference",description:"All function parameters are 32 bit integers unless otherwise noted.",source:"@site/docs/reference/functions.md",sourceDirName:"reference",slug:"/reference/functions",permalink:"/wasm4/docs/reference/functions",editUrl:"https://github.com/aduros/wasm4/edit/main/site/docs/reference/functions.md",version:"current",frontMatter:{sidebar_label:"Functions"},sidebar:"tutorialSidebar",previous:{title:"Distribution",permalink:"/wasm4/docs/guides/distribution"},next:{title:"Memory Layout",permalink:"/wasm4/docs/reference/memory"}},p=[{value:"Drawing",id:"drawing",children:[{value:"<code>blit (spritePtr, x, y, width, height, flags)</code>",id:"blit-spriteptr-x-y-width-height-flags",children:[]},{value:"<code>blitSub (spritePtr, x, y, width, height, srcX, srcY, stride, flags)</code>",id:"blitsub-spriteptr-x-y-width-height-srcx-srcy-stride-flags",children:[]},{value:"<code>line (x1, y1, x2, y2)</code>",id:"line-x1-y1-x2-y2",children:[]},{value:"<code>hline(x, y, len)</code>",id:"hlinex-y-len",children:[]},{value:"<code>vline(x, y, len)</code>",id:"vlinex-y-len",children:[]},{value:"<code>oval (x, y, width, height)</code>",id:"oval-x-y-width-height",children:[]},{value:"<code>rect (x, y, width, height)</code>",id:"rect-x-y-width-height",children:[]},{value:"<code>text (str, x, y)</code>",id:"text-str-x-y",children:[]}]},{value:"Sound",id:"sound",children:[{value:"<code>tone (frequency, duration, volume, flags)</code>",id:"tone-frequency-duration-volume-flags",children:[]}]},{value:"Storage",id:"storage",children:[{value:"<code>diskr (destPtr, size)</code>",id:"diskr-destptr-size",children:[]},{value:"<code>diskw (srcPtr, size)</code>",id:"diskw-srcptr-size",children:[]}]},{value:"Callbacks",id:"callbacks",children:[{value:"<code>start ()</code>",id:"start-",children:[]},{value:"<code>update ()</code>",id:"update-",children:[]}]},{value:"Other",id:"other",children:[{value:"<code>trace (str)</code>",id:"trace-str",children:[]},{value:"<code>tracef (fmt, stackPtr)</code>",id:"tracef-fmt-stackptr",children:[]}]}],m={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"functions-reference"},"Functions Reference"),(0,i.kt)("p",null,"All function parameters are 32 bit integers unless otherwise noted."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Go uses Go-Idiomatic names (PascalCase). Like ",(0,i.kt)("inlineCode",{parentName:"p"},"Blit")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"blit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DiskW")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"diskw"),"."))),(0,i.kt)("h2",{id:"drawing"},"Drawing"),(0,i.kt)("p",null,"All drawing functions are affected by the ",(0,i.kt)("a",{parentName:"p",href:"memory#draw_colors"},(0,i.kt)("inlineCode",{parentName:"a"},"DRAW_COLORS"))," register."),(0,i.kt)("h3",{id:"blit-spriteptr-x-y-width-height-flags"},(0,i.kt)("inlineCode",{parentName:"h3"},"blit (spritePtr, x, y, width, height, flags)")),(0,i.kt)("p",null,"Copies pixels to the framebuffer."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"spritePtr"),": Pointer to raw pixel data stored in either 1BPP or 2BPP format."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"x"),": X position in the destination framebuffer."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"y"),": Y position in the destination framebuffer."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"width"),": Width of the sprite."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"height"),": Height of the sprite."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"flags"),": Flags that modify behavior:")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Flag bits"),(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"BLIT_2BPP")),(0,i.kt)("td",{parentName:"tr",align:null},"Sprite pixel format: 2BPP if set, otherwise 1BPP")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"BLIT_FLIP_X")),(0,i.kt)("td",{parentName:"tr",align:null},"Flip sprite horizontally")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"BLIT_FLIP_Y")),(0,i.kt)("td",{parentName:"tr",align:null},"Flip sprite vertically")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"BLIT_ROTATE")),(0,i.kt)("td",{parentName:"tr",align:null},"Rotate sprite anti-clockwise 90 degrees")))),(0,i.kt)("p",null,"A 1BPP sprite uses 1 bit for each pixel and can contain 2 colors. A 2BPP sprite uses 2 bits per\npixel and can contain 4 colors."),(0,i.kt)("p",null,"Rotation is applied after any flipping."),(0,i.kt)("h3",{id:"blitsub-spriteptr-x-y-width-height-srcx-srcy-stride-flags"},(0,i.kt)("inlineCode",{parentName:"h3"},"blitSub (spritePtr, x, y, width, height, srcX, srcY, stride, flags)")),(0,i.kt)("p",null,"Copies a subregion within a larger sprite atlas to the framebuffer. Same as ",(0,i.kt)("inlineCode",{parentName:"p"},"blit"),", but with 3\nadditional parameters."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"srcX"),": Source X position of the sprite region."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"srcY"),": Source Y position of the sprite region."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stride"),": Total width of the overall sprite atlas. This is typically larger than ",(0,i.kt)("inlineCode",{parentName:"li"},"width"),".")),(0,i.kt)("p",null,"For info on other parameters, see ",(0,i.kt)("inlineCode",{parentName:"p"},"blit()"),"."),(0,i.kt)("h3",{id:"line-x1-y1-x2-y2"},(0,i.kt)("inlineCode",{parentName:"h3"},"line (x1, y1, x2, y2)")),(0,i.kt)("p",null,"Draws a line between two points."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 1 is used as the line color."),(0,i.kt)("h3",{id:"hlinex-y-len"},(0,i.kt)("inlineCode",{parentName:"h3"},"hline(x, y, len)")),(0,i.kt)("p",null,"Draws a horizontal line between ",(0,i.kt)("inlineCode",{parentName:"p"},"(x, y)")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"(x + len - 1, y)"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 1 is used as the line color."),(0,i.kt)("h3",{id:"vlinex-y-len"},(0,i.kt)("inlineCode",{parentName:"h3"},"vline(x, y, len)")),(0,i.kt)("p",null,"Draws a vertical line between ",(0,i.kt)("inlineCode",{parentName:"p"},"(x, y)")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"(x, y + len - 1)"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 1 is used as the line color."),(0,i.kt)("h3",{id:"oval-x-y-width-height"},(0,i.kt)("inlineCode",{parentName:"h3"},"oval (x, y, width, height)")),(0,i.kt)("p",null,"Draws an oval (or circle)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 1 is used as the fill color, ",(0,i.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 2 is used as the outline color."),(0,i.kt)("h3",{id:"rect-x-y-width-height"},(0,i.kt)("inlineCode",{parentName:"h3"},"rect (x, y, width, height)")),(0,i.kt)("p",null,"Draws a rectangle."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 1 is used as the fill color, ",(0,i.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 2 is used as the outline color."),(0,i.kt)("h3",{id:"text-str-x-y"},(0,i.kt)("inlineCode",{parentName:"h3"},"text (str, x, y)")),(0,i.kt)("p",null,"Draws text using the built-in system font. The string may contain new-line (",(0,i.kt)("inlineCode",{parentName:"p"},"\\n"),") characters."),(0,i.kt)("p",null,"The font is 8x8 pixels per character."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 1 is used as the text color, ",(0,i.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 2 is used as the background color."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"String Encoding")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"str")," is expected to be a ",(0,i.kt)("inlineCode",{parentName:"p"},"\\0")," terminated ASCII string.\nThis means bytes ",(0,i.kt)("inlineCode",{parentName:"p"},"0x80-0xFF")," are treated as individual characters, even in programming languages where strings are normally UTF-8 encoded.\nNo terminating ",(0,i.kt)("inlineCode",{parentName:"p"},"\\0")," is needed in those languages.\nIn languages where all strings are UTF-16, ",(0,i.kt)("inlineCode",{parentName:"p"},"str")," must only contain characters up to U+00FF and no ",(0,i.kt)("inlineCode",{parentName:"p"},"\\0")," is needed."),(0,i.kt)("p",{parentName:"div"},"The text drawing functions in WASM-4's internals and bindings are called ",(0,i.kt)("inlineCode",{parentName:"p"},"textUtf8")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"textUtf16")," for UTF-8 and UTF-16 respectively,\nbut these names are misnomers and don't actually use UTF-8 or UTF-16 encodings.\nIf you encounter these functions, instead treat them according to the explanation above."))),(0,i.kt)("h2",{id:"sound"},"Sound"),(0,i.kt)("h3",{id:"tone-frequency-duration-volume-flags"},(0,i.kt)("inlineCode",{parentName:"h3"},"tone (frequency, duration, volume, flags)")),(0,i.kt)("p",null,"Plays a sound tone."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"frequency"),": Wave frequency in hertz."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"duration"),": Duration of the tone in frames (1/60th of a second), up to 255 frames."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"volume"),": Volume of the sustain and attack durations, between 0 and 100."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"flags"),": Flags that modify behavior:")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Flag bits"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0 - 1"),(0,i.kt)("td",{parentName:"tr",align:null},"Channel (0-3): 0 = Pulse1, 1 = Pulse2, 2 = Triangle, 3 = Noise")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2 - 3"),(0,i.kt)("td",{parentName:"tr",align:null},"Mode (0-3): For pulse channels, the pulse wave duty cycle. 0 = 1/8, 1 = 1/4, 2 = 1/2, 3 = 3/4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4 - 5"),(0,i.kt)("td",{parentName:"tr",align:null},"Pan (0-2): 0 = Center, 1 = Left, 2 = Right")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"6"),(0,i.kt)("td",{parentName:"tr",align:null},"Use ",(0,i.kt)("em",{parentName:"td"},"Note Mode")," for frequencies: See below.")))),(0,i.kt)("p",null,"The high bits of ",(0,i.kt)("inlineCode",{parentName:"p"},"frequency")," can optionally describe a pitch slide effect:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Frequency bits"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0 - 15"),(0,i.kt)("td",{parentName:"tr",align:null},"Start frequency (0-65535)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"16 - 31"),(0,i.kt)("td",{parentName:"tr",align:null},"End frequency (0-65535)")))),(0,i.kt)("p",null,"If the end frequency is non-zero, then the frequency is ramped linearly over the total duration of the tone."),(0,i.kt)("p",null,"If ",(0,i.kt)("em",{parentName:"p"},"Note Mode")," is enabled, both the Start and End frequency values are instead interpreted as notes with pitch bend rather than frequencies:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Frequency bits"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0 - 7"),(0,i.kt)("td",{parentName:"tr",align:null},"Note (0-255): Note number according to the MIDI specification, e.g. 60 = C4, 69 = A4 (440 Hz)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"8 - 15"),(0,i.kt)("td",{parentName:"tr",align:null},"Note bend (0-255): Bend note upwards. 0 = Nothing, 255 = One 256th away from the next note above")))),(0,i.kt)("p",null,"The high bits of ",(0,i.kt)("inlineCode",{parentName:"p"},"duration")," can optionally describe an ADSR volume envelope:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Duration bits"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0 - 7"),(0,i.kt)("td",{parentName:"tr",align:null},"Sustain time (0-255)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"8 - 15"),(0,i.kt)("td",{parentName:"tr",align:null},"Release time (0-255)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"16 - 23"),(0,i.kt)("td",{parentName:"tr",align:null},"Decay time (0-255)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"24 - 31"),(0,i.kt)("td",{parentName:"tr",align:null},"Attack time (0-255)")))),(0,i.kt)("p",null,"The envelope starts at zero volume, then raises to the peak volume over the attack time, lowers to\nthe sustain volume during the decay time, remains at the sustain volume during the sustain time, and\nfinally fades to zero volume during the release time."),(0,i.kt)("p",null,"The high bits of ",(0,i.kt)("inlineCode",{parentName:"p"},"volume")," can optionally describe the peak volume used for the attack durations:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Volume bits"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0 - 7"),(0,i.kt)("td",{parentName:"tr",align:null},"Volume used for the sustain duration.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"8 - 15"),(0,i.kt)("td",{parentName:"tr",align:null},"Peak volume reached by the attack duration. Defaults to 100 if zero.")))),(0,i.kt)("h2",{id:"storage"},"Storage"),(0,i.kt)("p",null,"Games can persist up to 1024 bytes of data."),(0,i.kt)("h3",{id:"diskr-destptr-size"},(0,i.kt)("inlineCode",{parentName:"h3"},"diskr (destPtr, size)")),(0,i.kt)("p",null,"Reads up to ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," bytes from persistent storage into the pointer ",(0,i.kt)("inlineCode",{parentName:"p"},"destPtr"),"."),(0,i.kt)("p",null,"Returns the number of bytes read, which may be less than ",(0,i.kt)("inlineCode",{parentName:"p"},"size"),"."),(0,i.kt)("h3",{id:"diskw-srcptr-size"},(0,i.kt)("inlineCode",{parentName:"h3"},"diskw (srcPtr, size)")),(0,i.kt)("p",null,"Writes up to ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," bytes from the pointer ",(0,i.kt)("inlineCode",{parentName:"p"},"srcPtr")," into persistent storage."),(0,i.kt)("p",null,"Any previously saved data on the disk is replaced."),(0,i.kt)("p",null,"Returns the number of bytes written, which may be less than ",(0,i.kt)("inlineCode",{parentName:"p"},"size"),"."),(0,i.kt)("h2",{id:"callbacks"},"Callbacks"),(0,i.kt)("p",null,"Callback functions are called by WASM-4 and may be implemented by your game."),(0,i.kt)("h3",{id:"start-"},(0,i.kt)("inlineCode",{parentName:"h3"},"start ()")),(0,i.kt)("p",null,"Called at the start of the game, before the first update."),(0,i.kt)("h3",{id:"update-"},(0,i.kt)("inlineCode",{parentName:"h3"},"update ()")),(0,i.kt)("p",null,"Called every frame, about 60 times per second."),(0,i.kt)("h2",{id:"other"},"Other"),(0,i.kt)("h3",{id:"trace-str"},(0,i.kt)("inlineCode",{parentName:"h3"},"trace (str)")),(0,i.kt)("p",null,"Prints a message to the debug console."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"String Encoding")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"str")," is expected to be a ",(0,i.kt)("inlineCode",{parentName:"p"},"\\0")," terminated ASCII string.\nIn programming languages with UTF-8 or UTF-16 encoded string literals,\nthat encoding is used instead and no ",(0,i.kt)("inlineCode",{parentName:"p"},"\\0")," is needed."))),(0,i.kt)("h3",{id:"tracef-fmt-stackptr"},(0,i.kt)("inlineCode",{parentName:"h3"},"tracef (fmt, stackPtr)")),(0,i.kt)("p",null,"C/C++ only, works like ",(0,i.kt)("inlineCode",{parentName:"p"},"printf"),". Only these formatting characters are supported:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"%c"),": Character"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"%d"),": Decimal"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"%f"),": Float"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"%s"),": String"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"%x"),": Hex")))}u.isMDXComponent=!0}}]);