(self.webpackChunksite=self.webpackChunksite||[]).push([[3787],{3905:function(e,n,a){"use strict";a.d(n,{Zo:function(){return c},kt:function(){return d}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=t.createContext({}),u=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=u(e.components);return t.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(a),d=r,g=m["".concat(o,".").concat(d)]||m[d]||p[d]||l;return a?t.createElement(g,i(i({ref:n},c),{},{components:a})):t.createElement(g,i({ref:n},c))}));function d(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=a[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6742:function(e,n,a){"use strict";a.d(n,{Z:function(){return d}});var t=a(9756),r=a(7294),l=a(3727),i=a(2263),s=a(3919),o=a(412),u=(0,r.createContext)({collectLink:function(){}}),c=a(4996),p=a(8780),m=["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck","autoAddBaseUrl"];var d=function(e){var n,a,d=e.isNavLink,g=e.to,x=e.href,b=e.activeClassName,f=e.isActive,N=e["data-noBrokenLinkCheck"],k=e.autoAddBaseUrl,y=void 0===k||k,h=(0,t.Z)(e,m),P=(0,i.Z)().siteConfig,B=P.trailingSlash,_=P.baseUrl,w=(0,c.C)().withBaseUrl,v=(0,r.useContext)(u),L=g||x,I=(0,s.Z)(L),T=null==L?void 0:L.replace("pathname://",""),C=void 0!==T?(a=T,y&&function(e){return e.startsWith("/")}(a)?w(a):a):void 0;C&&I&&(C=(0,p.applyTrailingSlash)(C,{trailingSlash:B,baseUrl:_}));var O,E=(0,r.useRef)(!1),S=d?l.OL:l.rU,Y=o.Z.canUseIntersectionObserver;(0,r.useEffect)((function(){return!Y&&I&&null!=C&&window.docusaurus.prefetch(C),function(){Y&&O&&O.disconnect()}}),[C,Y,I]);var U=null!==(n=null==C?void 0:C.startsWith("#"))&&void 0!==n&&n,A=!C||!I||U;return C&&I&&!U&&!N&&v.collectLink(C),A?r.createElement("a",Object.assign({href:C},L&&!I&&{target:"_blank",rel:"noopener noreferrer"},h)):r.createElement(S,Object.assign({},h,{onMouseEnter:function(){E.current||null==C||(window.docusaurus.preload(C),E.current=!0)},innerRef:function(e){var n,a;Y&&e&&I&&(n=e,a=function(){null!=C&&window.docusaurus.prefetch(C)},(O=new window.IntersectionObserver((function(e){e.forEach((function(e){n===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(O.unobserve(n),O.disconnect(),a())}))}))).observe(n))},to:C||""},d&&{isActive:f,activeClassName:b}))}},3919:function(e,n,a){"use strict";function t(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!t(e)}a.d(n,{b:function(){return t},Z:function(){return r}})},4996:function(e,n,a){"use strict";a.d(n,{C:function(){return l},Z:function(){return i}});var t=a(2263),r=a(3919);function l(){var e=(0,t.Z)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,a=void 0===n?"/":n,l=e.url;return{withBaseUrl:function(e,n){return function(e,n,a,t){var l=void 0===t?{}:t,i=l.forcePrependBaseUrl,s=void 0!==i&&i,o=l.absolute,u=void 0!==o&&o;if(!a)return a;if(a.startsWith("#"))return a;if((0,r.b)(a))return a;if(s)return n+a;var c=a.startsWith(n)?a:n+a.replace(/^\//,"");return u?e+c:c}(l,a,e,n)}}}function i(e,n){return void 0===n&&(n={}),(0,l().withBaseUrl)(e,n)}},9443:function(e,n,a){"use strict";var t=(0,a(7294).createContext)(void 0);n.Z=t},8802:function(e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){var a=n.trailingSlash,t=n.baseUrl;if(e.startsWith("#"))return e;if(void 0===a)return e;var r,l=e.split(/[#?]/)[0],i="/"===l||l===t?l:(r=l,a?function(e){return e.endsWith("/")?e:e+"/"}(r):function(e){return e.endsWith("/")?e.slice(0,-1):e}(r));return e.replace(l,i)}},8780:function(e,n,a){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.uniq=n.applyTrailingSlash=void 0;var r=a(8802);Object.defineProperty(n,"applyTrailingSlash",{enumerable:!0,get:function(){return t(r).default}});var l=a(9964);Object.defineProperty(n,"uniq",{enumerable:!0,get:function(){return t(l).default}})},9964:function(e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return Array.from(new Set(e))}},2375:function(e,n,a){"use strict";a.d(n,{T:function(){return m},Z:function(){return d}});var t=a(7294),r=a(6742),l=a(5977),i=a(6010),s=a(9443);var o=function(){var e=(0,t.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},u={assemblyscript:"AssemblyScript",c:"C / C++",c3:"C3",d:"D",go:"Go",grain:"Grain",nelua:"Nelua",nim:"Nim",odin:"Odin",penne:"Penne",porth:"Porth",roland:"Roland",rust:"Rust",wat:"WebAssembly Text",zig:"Zig"};function c(e){return"string"==typeof e&&Object.prototype.hasOwnProperty.call(u,e)}function p(e){return(null!=e?e:"").trim().toLowerCase()}function m(e){var n=e.children,a=e.hidden,r=e.className;return t.createElement("div",{hidden:a,className:r},n)}function d(e){var n=t.Children.toArray(e.children),a=n.map((function(e){return e.props.value})),s=function(){var e=o(),n=e.tabGroupChoices,a=e.setTabGroupChoices,r=(0,t.useState)("assemblyscript"),l=r[0],i=r[1],s=function(e){var n=c(e);n?(i(e),a("language",e)):n||console.warn('MultilanguageCode: invalid code-lang received: "'+e+'"')},u=(0,t.useRef)(s);(0,t.useEffect)((function(){u.current=s}));var m="undefined"!=typeof window?window.location.search:"",d=n.language;return(0,t.useLayoutEffect)((function(){var e=p(d);c(e)&&i(e)}),[d]),(0,t.useEffect)((function(){var e=p(new URLSearchParams(m).get("code-lang"));c(e)&&u.current(e)}),[m]),{activeLang:l,updateLang:s}}().activeLang,m=(0,l.k6)(),d=a.includes(s)?s:a.includes("assemblyscript")?"assemblyscript":a[0],g=t.createElement("div",{className:"dropdown dropdown--hoverable dropdown--right"},t.createElement("a",{className:"navbar__link"},u[d]," "),t.createElement("ul",{className:"dropdown__menu text--left"},Object.entries(u).filter((function(e){return a.includes(e[0])})).map((function(e){var n=e[0],a=e[1],l=m.location.pathname+"?code-lang="+n+(m.location.hash||"#no-scroll");return t.createElement("li",{key:n},t.createElement(r.Z,{to:l,replace:!0,className:(0,i.Z)("dropdown__link",n===d&&"dropdown__link--active")},a))}))));return t.createElement("div",null,t.createElement("div",{className:"multilang"},g),t.createElement("div",null,n.map((function(e){return(0,t.cloneElement)(e,{key:e.props.value,hidden:e.props.value!==d})}))))}},364:function(e,n,a){"use strict";a.d(n,{Z:function(){return i}});var t=a(7294),r=a(2375),l={"language-typescript":"assemblyscript","language-javascript":"assemblyscript","language-c":"c","language-c3":"c3","language-cpp":"c","language-d":"d","language-grain":"grain","language-lua":"nelua","language-nelua":"nelua","language-nim":"nim","language-roland":"roland","language-rust":"rust","language-go":"go","language-odin":"odin","language-penne":"penne","language-porth":"porth","language-wasm":"wat","language-zig":"zig"};function i(e){var n=t.Children.toArray(e.children).map((function(e,n){return t.createElement(r.T,{key:n,value:l[e.props.children.props.className]},e)}));return t.createElement(r.Z,null,n)}},3796:function(e,n,a){"use strict";a.r(n),a.d(n,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var t=a(2122),r=a(9756),l=(a(7294),a(3905)),i=a(364),s=["components"],o={},u="Drawing Sprites",c={unversionedId:"guides/sprites",id:"guides/sprites",isDocsHomePage:!1,title:"Drawing Sprites",description:"WASM-4 can blit sprites directly to the screen. A sprite",source:"@site/docs/guides/sprites.md",sourceDirName:"guides",slug:"/guides/sprites",permalink:"/docs/guides/sprites",editUrl:"https://github.com/aduros/wasm4/edit/main/site/docs/guides/sprites.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Handling User Input",permalink:"/docs/guides/user-input"},next:{title:"Drawing Text",permalink:"/docs/guides/text"}},p=[{value:"1BPP Format",id:"1bpp-format",children:[]},{value:"2BPP Format",id:"2bpp-format",children:[{value:"Custom template",id:"custom-template",children:[]}]}],m={toc:p};function d(e){var n=e.components,a=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"drawing-sprites"},"Drawing Sprites"),(0,l.kt)("p",null,"WASM-4 can ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Bit_blit"},"blit")," sprites directly to the screen. A sprite\nis simply a pointer to raw bytes in memory."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"blit (spritePtr, x, y, width, height, flags)")),(0,l.kt)("p",null,"Sprites come in two formats: 1BPP and 2BPP."),(0,l.kt)("h2",{id:"1bpp-format"},"1BPP Format"),(0,l.kt)("p",null,"1BPP sprites require ",(0,l.kt)("strong",{parentName:"p"},"1")," ",(0,l.kt)("strong",{parentName:"p"},"B"),"it ",(0,l.kt)("strong",{parentName:"p"},"P"),"er ",(0,l.kt)("strong",{parentName:"p"},"P"),"ixel. That means each pixel can be one of two\ncolors. Bit value 0 uses ",(0,l.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 1, and bit value 1 is ",(0,l.kt)("inlineCode",{parentName:"p"},"DRAW_COLORS")," color 2."),(0,l.kt)("p",null,"First let's define an 8x8 1BPP sprite called ",(0,l.kt)("inlineCode",{parentName:"p"},"smiley")," at the top of our program. We do this by using\nthe binary literal syntax for each row of 8 pixels. If you look closely you can see it's a picture\nof a smiley face: \ud83d\ude42"),(0,l.kt)(i.Z,{mdxType:"MultiLanguageCode"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const smiley = memory.data<u8>([\n    0b11000011,\n    0b10000001,\n    0b00100100,\n    0b00100100,\n    0b00000000,\n    0b00100100,\n    0b10011001,\n    0b11000011,\n]);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"const uint8_t smiley[] = {\n    0b11000011,\n    0b10000001,\n    0b00100100,\n    0b00100100,\n    0b00000000,\n    0b00100100,\n    0b10011001,\n    0b11000011,\n};\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c3"},"const char[*] SMILEY = {\n    0b11000011,\n    0b10000001,\n    0b00100100,\n    0b00100100,\n    0b00000000,\n    0b00100100,\n    0b10011001,\n    0b11000011,\n};\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-d"},"immutable ubyte[] smiley = [\n    0b11000011,\n    0b10000001,\n    0b00100100,\n    0b00100100,\n    0b00000000,\n    0b00100100,\n    0b10011001,\n    0b11000011,\n];\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"var smiley = [8]byte {\n    0b11000011,\n    0b10000001,\n    0b00100100,\n    0b00100100,\n    0b00000000,\n    0b00100100,\n    0b10011001,\n    0b11000011,\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local smiley: []uint8 = {\n    0b11000011,\n    0b10000001,\n    0b00100100,\n    0b00100100,\n    0b00000000,\n    0b00100100,\n    0b10011001,\n    0b11000011\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-nim"},"var smiley: array[uint8, 8] = [\n  0b11000011'u8,\n  0b10000001,\n  0b00100100,\n  0b00100100,\n  0b00000000,\n  0b00100100,\n  0b10011001,\n  0b11000011,\n]\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-odin"},"smiley := [8]u8 {\n    0b11000011,\n    0b10000001,\n    0b00100100,\n    0b00100100,\n    0b00000000,\n    0b00100100,\n    0b10011001,\n    0b11000011,\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-penne"},"const SMILEY: [8]u8 = [\n    0b11000011,\n    0b10000001,\n    0b00100100,\n    0b00100100,\n    0b00000000,\n    0b00100100,\n    0b10011001,\n    0b11000011,\n];\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-porth"},'const smiley "\\\\c3\\\\81\\\\24\\\\24\\\\00\\\\24\\\\99\\\\c3"c end\n// 0b11000011,\n// 0b10000001,\n// 0b00100100,\n// 0b00100100,\n// 0b00000000,\n// 0b00100100,\n// 0b10011001,\n// 0b11000011,\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-roland"},"static SMILEY: [u8; 8] = [\n   0b11000011,\n   0b10000001,\n   0b00100100,\n   0b00100100,\n   0b00000000,\n   0b00100100,\n   0b10011001,\n   0b11000011,\n];\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"const smiley: [u8; 8] = [\n    0b11000011,\n    0b10000001,\n    0b00100100,\n    0b00100100,\n    0b00000000,\n    0b00100100,\n    0b10011001,\n    0b11000011,\n];\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-wasm"},'(data (i32.const 0x2000)\n  ;; 0b11000011,\n  ;; 0b10000001,\n  ;; 0b00100100,\n  ;; 0b00100100,\n  ;; 0b00000000,\n  ;; 0b00100100,\n  ;; 0b10011001,\n  ;; 0b11000011,\n  "\\c3\\81\\24\\24\\00\\24\\99\\c3"\n)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-zig"},"const smiley = [8]u8{\n    0b11000011,\n    0b10000001,\n    0b00100100,\n    0b00100100,\n    0b00000000,\n    0b00100100,\n    0b10011001,\n    0b11000011,\n};\n"))),(0,l.kt)("p",null,"Now that we have our sprite data, we can blit it to the screen at position (10, 10)."),(0,l.kt)(i.Z,{mdxType:"MultiLanguageCode"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"w4.blit(smiley, 10, 10, 8, 8, w4.BLIT_1BPP);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"blit(smiley, 10, 10, 8, 8, BLIT_1BPP);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c3"},"w4::blit(&smiley, 10, 10, 8, 8, w4::BLIT_1BPP);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-d"},"w4.blit(smiley.ptr, 10, 10, 8, 8, w4.blit1Bpp);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"w4.Blit(&smiley[0], 10, 10, 8, 8, w4.BLIT_1BPP)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"blit(smiley, 10, 10, 8, 8, BLIT_1BPP)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-nim"},"blit(addr smiley[0], 10, 10, 8, 8, BLIT_1BPP)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-odin"},"// BLIT_1BPP is the default.\n// To use BLIT_2BPP:\n// w4.blit(&smiley[0], 10, 10, 8, 8, { .USE_2BPP })\nw4.blit(&smiley[0], 10, 10, 8, 8)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-penne"},"blit(SMILEY, 10, 10, 8, 8, BLIT_1BPP);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-porth"},"$BLIT_1BPP 8 8 10 10 smiley blit\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-roland"},"blit(&SMILEY[0], 10, 10, 8, 8, BLIT_1BPP);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"blit(&smiley, 10, 10, 8, 8, BLIT_1BPP);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-wasm"},"(call $blit\n  ;; smiley\n  (i32.const 0x2000)\n  ;; x, y\n  (i32.const 10) (i32.const 10)\n  ;; width, height\n  (i32.const 8) (i32.const 8)\n  ;; BLIT_1BPP\n  (global.get $BLIT_1BPP))\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-zig"},"w4.blit(&smiley, 10, 10, 8, 8, w4.BLIT_1BPP);\n"))),(0,l.kt)("p",null,"Just like any other drawing function, we can set ",(0,l.kt)("a",{parentName:"p",href:"basic-drawing"},(0,l.kt)("inlineCode",{parentName:"a"},"DRAW_COLORS"))," to change the\ncolors."),(0,l.kt)("p",null,"The last parameter to ",(0,l.kt)("inlineCode",{parentName:"p"},"blit()")," is a flags bitset. We can bitwise OR (",(0,l.kt)("inlineCode",{parentName:"p"},"|"),") flags together to modify\nthe behavior of ",(0,l.kt)("inlineCode",{parentName:"p"},"blit()"),". For example, to flip the sprite vertically: \ud83d\ude43"),(0,l.kt)(i.Z,{mdxType:"MultiLanguageCode"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"w4.blit(smiley, 10, 10, 8, 8, w4.BLIT_1BPP | w4.BLIT_FLIP_Y);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"blit(smiley, 10, 10, 8, 8, BLIT_1BPP | BLIT_FLIP_Y);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c3"},"w4::blit(&smiley, 10, 10, 8, 8, w4::BLIT_1BPP | w4::BLIT_FLIP_Y);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-d"},"w4.blit(smiley.ptr, 10, 10, 8, 8, w4.blit1Bpp | w4.blitFlipY);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"w4.Blit(&smiley[0], 10, 10, 8, 8, w4.BLIT_1BPP | w4.BLIT_FLIP_Y)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"blit(smiley, 10, 10, 8, 8, BLIT_1BPP | BLIT_FLIP_Y)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-nim"},"blit(addr smiley[0], 10, 10, 8, 8, BLIT_1BPP or BLIT_FLIP_Y);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-odin"},"// Again: BLIT_1BPP is the default.\n// To use BLIT_2BPP:\n// w4.blit(&smiley[0], 10, 10, 8, 8, {.USE_2BPP, .FLIPY})\nw4.blit(&smiley[0], 10, 10, 8, 8, {.FLIPY})\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-penne"},"blit(SMILEY, 10, 10, 8, 8, BLIT_1BPP | BLIT_FLIP_Y);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-porth"},"$BLIT_FLIP_Y $BLIT_1BPP or 8 8 10 10 smiley blit\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-roland"},"blit(&SMILEY[0], 10, 10, 8, 8, BLIT_1BPP | BLIT_FLIP_Y);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"blit(&smiley, 10, 10, 8, 8, BLIT_1BPP | BLIT_FLIP_Y);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-wasm"},"(call $blit\n  ;; smiley\n  (i32.const 0x2000)\n  ;; x, y\n  (i32.const 10) (i32.const 10)\n  ;; width, height\n  (i32.const 8) (i32.const 8)\n  ;; BLIT_1BPP | BLIT_FLIP_Y\n  (i32.or\n    (global.get $BLIT_1BPP)\n    (global.get $BLIT_FLIP_Y)))\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-zig"},"w4.blit(&smiley, 10, 10, 8, 8, w4.BLIT_1BPP | w4.BLIT_FLIP_Y);\n"))),(0,l.kt)("p",null,"For a full list of blit flags, see the ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/functions"},"Functions")," reference."),(0,l.kt)("h2",{id:"2bpp-format"},"2BPP Format"),(0,l.kt)("p",null,"2BPP sprites require ",(0,l.kt)("strong",{parentName:"p"},"2")," ",(0,l.kt)("strong",{parentName:"p"},"B"),"its ",(0,l.kt)("strong",{parentName:"p"},"P"),"er ",(0,l.kt)("strong",{parentName:"p"},"P"),"ixel. That means each pixel can be one of four\ncolors."),(0,l.kt)("p",null,'Unlike with 1BPP, it\'s harder to "draw" the sprite directly in the source code with binary literal\nASCII art. An alternative is to use an image editor with a palette of 4 colors and save an indexed\nPNG. We can then use ',(0,l.kt)("inlineCode",{parentName:"p"},"w4 png2src")," to convert it to source code to paste into our program."),(0,l.kt)("p",null,"For example, if we have this 4-color image of a bunny:"),(0,l.kt)("img",{src:"/img/bunny.png",width:"160",className:"pixelated"}),(0,l.kt)("p",null,"Note that the RGB color of this sprite doesn't matter, ",(0,l.kt)("inlineCode",{parentName:"p"},"w4 png2src")," only cares about a pixel's\npalette index."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"w4 png2src --assemblyscript bunny.png\n")),(0,l.kt)("p",null,"Will print out the following generated source:"),(0,l.kt)(i.Z,{mdxType:"MultiLanguageCode"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const bunny_width = 16;\nconst bunny_height = 16;\nconst bunny_flags = 1; // BLIT_2BPP\nconst bunny = memory.data<u8>([ 0xaa,0x9e,0xac,0xaa,0xaa,0x57,0xbf,0x2a,0xaa,0x57,0xbf,0x2a,0xaa,0x17,0xbf,0x2a,0xaa,0x17,0x03,0x2a,0xaa,0x57,0x54,0x2a,0xa8,0x55,0x55,0x6a,0xa9,0x55,0x05,0x0a,0xaf,0xd5,0x55,0x4a,0xa8,0x75,0x55,0x4a,0xaa,0xd5,0x57,0x2a,0xaa,0x1d,0x7c,0xaa,0xa8,0x75,0x15,0x2a,0xa8,0x45,0x15,0x2a,0xaa,0x10,0x54,0xaa,0xaa,0x85,0x52,0xaa ]);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c3"},"// bunny\nconst BUNNY_WIDTH = 16;\nconst BUNNY_HEIGHT = 16;\nconst BUNNY_FLAGS = 1; // BLIT_2BPP\nconst char[64] BUNNY = { 0xaa,0x9e,0xac,0xaa,0xaa,0x57,0xbf,0x2a,0xaa,0x57,0xbf,0x2a,0xaa,0x17,0xbf,0x2a,0xaa,0x17,0x03,0x2a,0xaa,0x57,0x54,0x2a,0xa8,0x55,0x55,0x6a,0xa9,0x55,0x05,0x0a,0xaf,0xd5,0x55,0x4a,0xa8,0x75,0x55,0x4a,0xaa,0xd5,0x57,0x2a,0xaa,0x1d,0x7c,0xaa,0xa8,0x75,0x15,0x2a,0xa8,0x45,0x15,0x2a,0xaa,0x10,0x54,0xaa,0xaa,0x85,0x52,0xaa };\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-penne"},"// bunny\nconst BUNNY_WIDTH: u32 = 16;\nconst BUNNY_HEIGHT: u32 = 16;\nconst BUNNY_FLAGS: u32 = 1; // BLIT_2BPP\nconst BUNNY: [64]u8 = [ 0xaa,0x9e,0xac,0xaa,0xaa,0x57,0xbf,0x2a,0xaa,0x57,0xbf,0x2a,0xaa,0x17,0xbf,0x2a,0xaa,0x17,0x03,0x2a,0xaa,0x57,0x54,0x2a,0xa8,0x55,0x55,0x6a,0xa9,0x55,0x05,0x0a,0xaf,0xd5,0x55,0x4a,0xa8,0x75,0x55,0x4a,0xaa,0xd5,0x57,0x2a,0xaa,0x1d,0x7c,0xaa,0xa8,0x75,0x15,0x2a,0xa8,0x45,0x15,0x2a,0xaa,0x10,0x54,0xaa,0xaa,0x85,0x52,0xaa ];\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"const BUNNY_WIDTH: u32 = 16;\nconst BUNNY_HEIGHT: u32 = 16;\nconst BUNNY_FLAGS: u32 = 1; // BLIT_2BPP\nconst BUNNY: [u8; 64] = [ 0xaa,0x9e,0xac,0xaa,0xaa,0x57,0xbf,0x2a,0xaa,0x57,0xbf,0x2a,0xaa,0x17,0xbf,0x2a,0xaa,0x17,0x03,0x2a,0xaa,0x57,0x54,0x2a,0xa8,0x55,0x55,0x6a,0xa9,0x55,0x05,0x0a,0xaf,0xd5,0x55,0x4a,0xa8,0x75,0x55,0x4a,0xaa,0xd5,0x57,0x2a,0xaa,0x1d,0x7c,0xaa,0xa8,0x75,0x15,0x2a,0xa8,0x45,0x15,0x2a,0xaa,0x10,0x54,0xaa,0xaa,0x85,0x52,0xaa ];\n"))),(0,l.kt)("p",null,"Pasting that into our program, we can draw a bunny like so:"),(0,l.kt)(i.Z,{mdxType:"MultiLanguageCode"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"*DRAW_COLORS = 0x2013;\nblit(bunny, 10, 10, bunny_width, bunny_height, bunny_flags);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c3"},"*w4::DRAW_COLORS = 0x2013;\nw4::blit(&BUNNY, 10, 10, BUNNY_WIDTH, BUNNY_HEIGHT, BUNNY_FLAGS);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-penne"},"DRAW_COLORS = 0x2013;\nblit(BUNNY, 10, 10, BUNNY_WIDTH, BUNNY_HEIGHT, BUNNY_FLAGS);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"unsafe { *DRAW_COLORS = 0x2013 }\nblit(&BUNNY, 10, 10, BUNNY_WIDTH, BUNNY_HEIGHT, BUNNY_FLAGS);\n"))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"basic-drawing"},(0,l.kt)("inlineCode",{parentName:"a"},"DRAW_COLORS"))," is used here to modify the 4 colors of the original sprite. Reading\nfrom right to left: color 1 becomes 3, color 2 becomes 1, color 3 becomes 0 (transparent), and color\n4 becomes 2."),(0,l.kt)("h3",{id:"custom-template"},"Custom template"),(0,l.kt)("p",null,"You can use a custom template for generating a image source.\nUse a ",(0,l.kt)("inlineCode",{parentName:"p"},"--template filename")," for this."),(0,l.kt)("p",null,"Templates use the ",(0,l.kt)("inlineCode",{parentName:"p"},"Mustache")," syntax. An array called ",(0,l.kt)("inlineCode",{parentName:"p"},"sprites")," is provided."),(0,l.kt)("p",null,"Basic template:"),(0,l.kt)(i.Z,{mdxType:"MultiLanguageCode"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"{{#sprites}}\n// {{name}}\n#define {{name}}Width {{width}}\n#define {{name}}Height {{height}}\n#define {{name}}Flags {{flagsHumanReadable}}\nconst uint8_t {{name}}[{{length}}] = { {{bytes}} };\n\n{{/sprites}}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c3"},"{{#sprites}}\n// {{name}}\nconst uint {{rustName}}_WIDTH: u32 = {{width}};\nconst uint {{rustName}}_HEIGHT: u32 = {{height}};\nconst uint {{rustName}}_FLAGS: u32 = {{flags}}; // {{flagsHumanReadable}}\nconst char[{{length}}] {{rustName}} = { {{bytes}} };\n\n{{/sprites}}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"{{#sprites}}\n// {{name}}\nconst {{rustName}}_WIDTH: u32 = {{width}};\nconst {{rustName}}_HEIGHT: u32 = {{height}};\nconst {{rustName}}_FLAGS: u32 = {{flagsHumanReadable}};\nconst {{rustName}}: [u8; {{length}}] = [ {{bytes}} ];\n\n{{/sprites}}\n"))),(0,l.kt)("p",null,"Where:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{{#sprites}}"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"{{/sprites}}")," - Start and end of the list of sprites"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{{name}}")," - filename (i.e. ",(0,l.kt)("inlineCode",{parentName:"li"},"wallTop"),"; string),"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{{rustName}}")," - Rust specific variable name (i.e. ",(0,l.kt)("inlineCode",{parentName:"li"},"WALL_TOP"),"; string)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{{odinName}}")," - Odin specific variable name (i.e. ",(0,l.kt)("inlineCode",{parentName:"li"},"wall_top"),"; string)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{{odinFlags}}")," - Odin specific flags (",(0,l.kt)("inlineCode",{parentName:"li"},"nil")," or ",(0,l.kt)("inlineCode",{parentName:"li"},".USE_2BPP"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{{width}}"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"{{height}}")," - image dimensions (integer)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{{flags}}"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"{{flagsHumanReadable}}")," - type flag as integer and enum name (BLIT_2BPP or BLIT_1BPP)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{{length}}")," - count of bytes (integer)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{{bytes}}")," - comma separated series of bytes (string)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{{firstByte}}")," - first byte of the sprite (string)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{{restBytes}}")," - comma-separated series of bytes excluding the first one (string)")))}d.isMDXComponent=!0},6010:function(e,n,a){"use strict";function t(e){var n,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(a=t(e[n]))&&(r&&(r+=" "),r+=a);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}function r(){for(var e,n,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(n=t(e))&&(r&&(r+=" "),r+=n);return r}a.d(n,{Z:function(){return r}})}}]);